Lo Zilog Z80 è un microprocessore ad 8 bit con la ALU a 4 bit progettato da Zilog e commercializzato a partire dal luglio del 1976. 
È stato largamente utilizzato in numerosi sistemi, negli home computer, nei videogiochi arcade, nelle console, nei sistemi embedded e in quelli militari. Lo Z80, con i suoi derivati e i suoi cloni, è una delle famiglie di CPU più impiegate di tutti i tempi e con la famiglia di CPU basate sul MOS 6502 ha dominato il mercato dei microcomputer e delle console giochi ad 8 bit di fine anni settanta e quello degli home computer dei primi anni ottanta.Zilog provò anche a commercializzare delle versioni per minicomputer dell'architettura Z80, lo Z800 e lo Z280, che però non riscossero il successo del loro predecessore: il primo fu abbandonato ancor prima della sua commercializzazione, mentre la complessità ed i bug del secondo ne limitarono la diffusione a vantaggio di altri prodotti, fra cui l'Hitachi HD64180 e lo Zilog Z180.
Federico Faggin, dopo aver lavorato sull'8080, lasciò Intel alla fine del 1974 per divergenze con la dirigenza: questa, infatti, era ancora troppo focalizzata sulla produzione di chip di memoria e considerava i microprocessori solo come prodotti accessori, utili per vendere più RAM. Faggin, invece, intravedeva in essi una potenzialità d'impiego molto più vasta, grazie alla loro possibilità di essere programmati per impieghi generali. Faggin decise quindi di lasciare Intel per fondare insieme al suo collega Ralph Ungermann la Zilog, una società dedita esclusivamente alla produzione di CPU. Il primo prodotto della società fu proprio lo Z80, nato da un progetto che Faggin elaborò verso la fine del 1974, presentato nel luglio del 1976.Lo Z80 si diffuse nel mercato dei processori molto più dell'8080 e del suo successore, l'Intel 8085 e divenne una delle CPU ad 8 bit più popolari. Uno dei fattori chiave del successo iniziale dello Z80 furono i sistemi integrati nel chip stesso, come quello per il refresh della memoria DRAM, che permettevano di utilizzarlo in abbinamento ad altri pochi chip di supporto (più in là comparvero sistemi embedded basati sullo Z80, che in genere utilizzano memorie statiche, che non necessitano di questo refresh). La Zilog concesse in licenza senza royalty la proprietà intellettuale del progetto del core dello Z80 a qualunque società lo avesse voluto produrre in proprio: questa politica commerciale alla lunga ripagò Zilog con un ritorno di immagine, diffusione e vendite perché permise ad un prodotto di una piccola società, quale essa era, di affermarsi sul mercato mondiale grazie al fatto che grossi produttori come Toshiba iniziarono a produrre in quantità industriali il processore. Come conseguenza di questa scelta commerciale, Zilog ha prodotto meno del 50% di tutti gli Z80 costruiti in questi anni. Nonostante ciò diversi produttori dell'Europa dell'Est, del Giappone e dell'ex Unione Sovietica fabbricarono delle copie della CPU senza licenza.
Il set di istruzioni dello Z80 fu scritto per essere compatibile con l'Intel 8080, per cui gran parte del codice per l'8080 (principalmente quello del sistema operativo CP/M) poteva girare senza modifiche sullo Z80. Masatoshi Shima (co-progettista dell'Intel 4004 e dell'Intel 8080) contribuì allo sviluppo dello Z80.
un insieme di istruzioni più completo, incluse quelle per la manipolazione dei bit, lo spostamento dei blocchi di dati, l'I/O e le istruzioni per la ricerca dei byte;
un sistema di interrupt vettorizzati maggiormente automatizzato e generalizzato, operante in 3 modalità: il modo 2 gestiva una modalità vettorizzata indiretta, il modo 1 prevedeva una modalità diretta, valida per sistemi semplici con hardware minimale, mentre il modo 0 indicava la modalità compatibile 8080.
due banchi di registri separati, che possono essere velocemente invertiti, per velocizzare la risposta agli interrupt;
necessità di meno hardware per l'alimentazione, la generazione del clock, l'interfaccia di memoria e l'I/O:
richiesta di 1 singola alimentazione a 5 V (l'8080 necessita di 3 alimentazioni, rispettivamente a -5 V, +5 V e +12 V)
clock a 5 V a singola fase (l'8080 necessita di un generatore di clock a due fasi di grande ampiezza);
un meccanismo integrato per il refresh della memoria ad accesso diretto che altrimenti doveva essere fornito da una circuiteria esterna;
bus dati non multiplato (l'8080 ha nel bus dati un sistema multiplato di segnali di stato);
un prezzo più basso.Il progetto originale in logica NMOS vide il limite massimo della frequenza del clock crescere progressivamente dai 2,5 MHz iniziali fino ai 4 MHz dello Z80A, ai 6 MHz dello Z80B ed agli 8 MHz dello Z80H. Ne fu realizzata anche una versione CMOS con un intervallo di frequenze che andava dai 4 MHz fino ai 20 MHz delle versioni vendute più recentemente. La versione CMOS permetteva inoltre una modalità d'attesa a basso consumo energetico denominata "Power-Down", o "modalità standby", in cui veniva mantenuto lo stato interno (registri e segnali di controllo) del processore fino al ricevimento del segnale di uscita da tale stato (un segnale di clock). I chip derivati compatibili con lo Z80, l'HD64180/Z180 e l'eZ80 sono dichiarati capaci rispettivamente di 33 MHz e 50 MHz.
Il modello di programmazione e la gestione dei registri sono convenzionali e simili a quelli della famiglia x86. I registri AF, BC, DE e HL, compatibili con quelli dell'Intel 8080, sono duplicati nello Z80 in 2 banchi separati con il processore che può velocemente passare da un banco all'altro, una caratteristica utile per velocizzare la risposta agli interrupt ad alta priorità e livello singolo. Questa caratteristica era presente nel Datapoint 2200, mentre non era implementata nell'Intel 8008. Il sistema dei registri doppi aveva senso sullo Z80 (e su altri microprocessori dell'epoca), perché esso era stato progettato anche per i sistemi embedded, non solo per i personal computer o per gli home computer. I doppi registri risultarono molto utili per la codifica assembly altamente ottimizzata: alcuni software, specialmente i giochi per i sistemi MSX, gli ZX Spectrum ed altri computer basati sullo Z80, portarono l'ottimizzazione dell'assembly dello Z80 a livelli estremi, impiegando, tra le altre cose, proprio i registri duplicati.
Come sull'8080, i registri ad 8 bit sono di solito accoppiati per ottenerne delle versioni a 16 bit. I registri compatibili con quelli dell'8080 sono:
AF - (8 bit) accumulatore (A) e bit di flag (F) per resto, zero, segno meno, parità/overflow, semi-riporto (usato per codifica decimale), ed un flag Aggiungi/Sottrai (normalmente chiamato N), anch'esso per la codifica decimale;
HL - (16 bit) registro accumulatore a 16 bit/indirizzo oppure 2 registri ad 8 bit;
PC - (16 bit) contatore di programma.I nuovi registri introdotti dallo Z80 sono:
IX - (16 bit) registro indice o di base per offset ad 8 bit immediati o accumulatore a 16 bit;
IY - (16 bit) registro indice o di base per offset ad 8 bit immediati o accumulatore a 16 bit;
R - (8 bit) contatore per refresh della DRAM (il bit più significativo non conta);
AF' - accumulatore alternativo (od "ombra") e flag (attivati e disattivati con EX AF,AF');
BC', DE' e HL' - registri alternativi (od "ombra") e flag (attivati o disattivati con EXX);
4 bit per lo stato degli interrupt e le modalità degli interrupt.Non c'è la possibilità di accedere direttamente ai registri alternativi: esistono per questo compito 2 istruzioni speciali, EX AF,AF' e EXX, ognuna delle quali modifica 1 di 2 multiplatori flip-flop. Questo permette passaggi veloci di contesto per le routine di servizio degli interrupt: EX AF, AF' può essere utilizzata da sola (per routine di interrupt molto semplici e veloci) o in abbinamento a EXX per invertire l'intero gruppo di registri AF, BC, DE e HL, un modo di operare molto più veloce di quello basato sull'inserimento degli stessi registri nello stack (interrupt con più livelli o interrupt lenti e con bassa priorità normalmente utilizzano lo stack per memorizzare il valore dei registri).
Il registro di refresh ("R") viene incrementato ogni volta che la CPU esegue un opcode (o un prefisso opcode) e non ha pertanto una relazione semplice con l'esecuzione del programma. Questo modo di operare era spesso usato per generare numeri pseudo-casuali nei giochi, ma anche in schemi di protezione software. Era anche utilizzato come contatore "hardware" in alcuni sistemi: un famoso esempio di questo utilizzo è il Sinclair ZX81, che permette di tenere traccia delle posizioni dei caratteri sullo schermo TV innescando un interrupt al verificarsi della reinizializzazione (collegando l'interrupt ad A6).
Il registro vettoriale di interrupt ("I") è usato per gli interrupt dello Z80 specificati con modalità 2 (selezionata dall'istruzione IM 2). Esso fornisce l'indirizzo di base per la tabella a 128 voci degli indirizzi degli interrupt di servizio che sono selezionati tramite un puntatore inviato alla CPU durante un ciclo di riconoscimento degli interrupt. Il puntatore identifica un particolare chip di periferica e/o una funzione di periferica o quant'altro, dove i chip sono normalmente connessi a cascata per la risoluzione della priorità. Come per quello di refresh, questo registro è stato talvolta utilizzato in maniera "creativa".
Il linguaggio assembly del primo Intel 8008 era basato su una sintassi molto semplice (ma schematica), derivata dall'architettura del Datapoint 2200; questa sintassi fu poi trasformata in un nuovo linguaggio assembly dedicato al chip 8008; il nuovo linguaggio assembly fu poi esteso, quasi nello stesso periodo, per adattarsi alle aggiunte possibilità di indirizzamento offerte dal più evoluto chip Intel 8080 (l'8008 e l'8080 condividevano un linguaggio senza che fossero compatibili a livello di codice binario; l'8008 era invece compatibile a livello binario con il Datapoint 2200).
In questo processo di trasformazione, l'abbreviazione mnemonica "L", che stava per LOAD, fu sostituita dalle parole LOAD, STORE e MOVE, a cui erano state aggiunte altre lettere simboliche. La lettera "M", per Memory (referenziata da HL), fu trasformata da abbreviazione mnemonica a operando indipendente sintatticamente, mentre i registri e le combinazioni di registri furono indicati in maniera molto inconsistente, sia abbreviando gli operandi (ad esempio "MVI D" e "LXI H") sia usando le stesse forme mnemoniche delle istruzioni (ad esempio "LDA" e "LHLD") sia usando entrambi gli schemi contemporaneamente (ad esempio "LDAX B" e "STAX D").
Tabella di 4 sintassi che usano esempi di istruzioni di LOAD e STORE equivalenti o (per l'8086) molto simili.
Intel dichiarò che i codici mnemonici del suo assembly erano brevettati. Fu perciò sviluppata una nuova sintassi, questa volta con un approccio più semantico:
tutti i registri e le coppie di registri venivano indicati esplicitamente con i loro nomi interi;
le parentesi tonde "()" venivano utilizzate coerentemente per indicare "contenuto di memoria a" (puntatore non referenziato), con l'eccezione di alcune istruzioni di salto;
Tutte le istruzioni "load" e "store" usavano lo stesso codice mnemonico, LD per LOAD (un ritorno al vocabolario semplicistico del Datapoint 2200); altre istruzioni di uso comune (come ADD e INC) usavano lo stesso codice mnemonico, indipendentemente dal modo di indirizzamento o dalla dimensione dell'operando (ciò era possibile perché gli stessi operandi contenevano in sé abbastanza informazioni).Queste linee guida resero semplice il compito di trovare i nomi e la sintassi di tutte le nuove istruzioni dello Z80, così come il riadattamento delle vecchie (ad esempio "LD BC,(1234)" espresso più sopra).
Dalla tabella si nota anche la somiglianza tra la sintassi dello Z80 e quella dell'Intel 8086. A parte la differenza di nomenclatura, e a dispetto di una certa discrepanza nella struttura base dei registri, le due sintassi sono virtualmente isomorfe per una larga porzione di istruzioni. Non è però certo se questa somiglianza sia dovuta alle comuni influenze avute su entrambi i gruppi di progettazione dalle CPU ante Intel 8080 (come il PDP-11), alla natura competitiva della relazione fra i due progetti o ad una questione di scelte.
Lo Z80 utilizza 252 dei 256 codici disponibili come singoli byte opcode ("root instructions", "istruzioni base"); i 4 codici rimanenti sono utilizzati estesamente come prefissi opcode: CB e ED abilitano delle istruzioni aggiuntive, e DD e FD selezionano rispettivamente "IX+d" e "IY+d" (in alcuni casi senza utilizzare "d") al posto di HL. Questo schema dà allo Z80 un elevato numero di permutazioni di istruzioni e registri; Zilog le inquadrò in 158 differenti "tipi di istruzioni", 78 delle quali sono le stesse di quelle dell'8080, permettendo l'esecuzione dei programmi 8080 sullo Z80.
La documentazione di Zilog raggruppa inoltre le istruzioni nelle seguenti categorie:
operazioni di chiamata e ritorno da sottoprogrammi e riavvio da indirizzi predefiniti (restart);
operazioni di rotazione e scorrimento dei bit;Come su altri processori dell'epoca, nessuna istruzione di moltiplicazione è disponibile nell'originale Z80. Le differenti dimensioni e le varianti delle operazioni di addizione, spostamento e rotazione dei bit avevano anche differenti effetti sui flag, a causa delle proprietà di influenza sui flag copiate dall'8080. Le istruzioni di caricamento non influenzavano i flag (tranne nei casi di caricamento negli speciali registri I e R). Le istruzioni sui registri indice erano utili per ridurre la dimensione del codice e, anche se alcune di esse non erano molto più veloci delle "equivalenti" sequenze composte dalle semplici operazioni, esse permettevano di ridurre indirettamente il tempo di esecuzione, diminuendo il numero di istruzioni necessarie per salvare e ripristinare i registri. Similarmente, le istruzioni per le addizioni a 16 bit non erano particolarmente veloci nell'originale Z80 (11 cicli); comunque esse erano circa due volte più veloci se paragonate alle operazioni ad 8 bit alle prese con gli stessi calcoli e inoltre riducevano l'utilizzo dei registri.
I registri indice IX e IY erano stati pensati come puntatori a 16 bit flessibili per migliorare l'abilità di manipolare la memoria, le strutture di dati e gli stack. Ufficialmente essi erano gestiti solo come registri a 16 bit, ma in realtà erano implementati come una coppia di registri ad 8 bit, alla stessa maniera del registro HL, che era accessibile sia integralmente a 16 bit sia nei suoi singoli registri ad 8 bit "High" e "Low". Ugualmente i codici opcode (linguaggio macchina) erano identici ma preceduti da un nuovo prefisso opcode.Zilog pubblicò gli opcode ed i relativi codici mnemonici per le funzioni illustrate, ma non documentò il fatto che ogni opcode che permetteva la manipolazione dei registri H e L era ugualmente valido per le porzioni ad 8 bit dei registri IX e IY. Un esempio è l'opcode 26h seguito immediatamente da un byte (LD H,n), che caricherà quel valore nel registro H. Precedendo questa istruzione a 2 byte con il prefisso opcode per il registro IX si avrà il caricamento di quel valore negli 8 bit più significativi del registro IX. Un'importante eccezione a questo modo di operare è data dalle istruzioni simili a LD H,(IX+d) che fanno uso sia del registro HL sia di IX, o di IY, nella stessa istruzione: in questo caso il prefisso DD si applica solo alla porzione "(IX+d)" dell'istruzione.
Inoltre ci sono diverse altre istruzioni non documentate. Alcune di esse sono la conseguenza dei diversi progetti iniziali del chip mentre altre fanno riferimento ad aree molto esterne del die con un elevato tasso di malfunzionamento, motivo per il quale è stato deciso di non documentarle.
Ogni istruzione è eseguita in passaggi che sono di solito indicati come cicli macchina (o M-cycles), dall'inglese "machine cycles", ognuno dei quali può richiedere da 3 a 6 cicli clock (o T-states o T-cycles). Ogni M-cycle corrisponde approssimativamente ad un accesso alla memoria e/o ad un'operazione interna. Molte istruzione terminano effettivamente durante il ciclo M1 dell'istruzione successiva, condizione nota come fetch/execute overlap.
Gli M-cycle dello Z80 sono gestiti da una macchina a stati finiti interna che costruisce ogni ciclo a partire da 3, 4, 5 o 6 T-cycle, a seconda del contesto. Questo meccanismo evita di dovere usare un'ingombrante logica asincrona e fa sì che i segnali di controllo si comportino in modo coerente all'interno di una vasta gamma di frequenze di clock. Ciò significa anche che va usato un clock con una frequenza superiore rispetto a quello che si userebbe nella situazione in cui questa suddivisione dei cicli macchina non esistesse (approssimativamente 2-3 volte superiore).
Questo non implica però la necessità di usare una memoria con dei tempi di accesso migliori, in quanto un clock con una risoluzione più elevata permette un controllo più preciso dei timing della memoria e la stessa può essere attiva in parallelo con la CPU per un margine più ampio (cioè registra meno idle), permettendo un uso più efficiente delle sue prestazioni. Parlando di esecuzione delle istruzioni, lo Z80 combina 2 cicli di clock completi in un lungo periodo di accesso alla memoria (il segnale M1), che generalmente dura solo una frazione di un (più lungo) ciclo di clock, in una specie di design più asincrono (tipo il Motorola 6800 o altre CPU simili).
Le memorie erano di solito troppo lente (soprattutto quelle di tipo EPROM, ma anche le Flash) se paragonate ai sotto-cicli (i cicli di clock) delle macchine a stato finito usate nei processori contemporanei. Il ciclo macchina più breve che poteva essere usato nei progetti embedded era spesso limitato dai tempi di accesso della memoria, non dalla massima frequenza della CPU (specialmente durante l'era degli home computer). Questa relazione è però cambiata leggermente durante gli ultimi decenni, particolarmente per quanto riguarda le SRAM; senza cache, i disegni a ciclo singolo come l'eZ80 sono pertanto divenuti recentemente molto più importanti.
Zilog introdusse un certo numero di periferiche per lo Z80, tutte supportanti il sistema di gestione degli interrupt e lo spazio di indirizzi I/O della CPU. Queste includevano il "CTC" (Counter-Timer-Circuit), il "SIO" (Serial Input Output), il "DMA" (Direct Memory Access), il "PIO" (Parallel Input-Output) ed il "DART" (Dual Asynchronous Receiver Transmitter). Col tempo, di questi chip furono offerte anche versioni in tecnologia CMOS, che offrivano un consumo energetico più basso unito ad una velocità superiore.
Come i processori Intel 8085 e 8086, ma non come i processori Motorola 6800 e MOS 6502, lo Zilog Z80 e l'Intel 8080 avevano per le istruzioni che riguardavano l'I/O una linea di controllo ed uno spazio d'indirizzi separati. Nonostante alcuni computer basati sullo Z80 (come l'Osborne 1) utilizzassero dei dispositivi di I/O mappati in memoria, in genere lo spazio I/O era utilizzato per indirizzare uno dei molti chip periferici di Zilog compatibili con lo Z80: i chip di I/O di Zilog supportavano gli interrupt in modo 2 dello Z80 (vedi sopra), che semplificava la gestione degli stessi per un gran numero di periferiche.
Lo Z80 veniva indicato ufficialmente come capace di supportare l'indirizzamento della memoria a 16 bit (massimo 64 kB) e l'indirizzamento I/O ad 8 bit (massimo 256 porte), ma leggendo il manuale hardware di riferimento si poteva notare come tutte le istruzioni di I/O potessero gestire l'intero bus indirizzi a 16 bit: OUT (C),reg e IN reg,(C) inseriscono l'intero contenuto del registro BC nel bus indirizzi; OUT (n),A e IN A,(n) inseriscono il contenuto del registro A nei bit b8-b15 del bus indirizzi e di n nei bit b0-b7 del bus indirizzi. Un progettista poteva scegliere se decodificare l'intero bus indirizzi a 16 bit sulle operazioni di I/O, così da avvantaggiarsi di questa caratteristica, oppure usare i bit più alti del bus indirizzi (b8-b15) per selezionare delle sotto-caratteristiche del dispositivo di I/O. Questa peculiarità è stata usata anche per minimizzare i requisiti hardware di decodifica, come negli Amstrad CPC e nello ZX81.
Il Mostek MK3880 e l'SGS-Thomson (ora STMicroelectronics) Z8400 erano entrambi copie ufficiali dello Z80. Sharp e NEC svilupparono dei cloni in tecnologia NMOS, rispettivamente l'LH0080 e il µPD780C. Toshiba ne realizzò una versione CMOS, il TMPZ84C00, che è ritenuto essere lo stesso processore dello Zilog Z84C00, anch'esso in CMOS. Ci furono anche chip Z80 realizzati da GoldStar (poi LG), così come la serie BU18400 dei cloni Z80 (inclusi i chip DMA, PIO, CTC, DART e SIO) in tecnologia NMOS e CMOS realizzati da ROHM Electronics.
Nella Germania dell'Est comparve un clone senza licenza dello Z80, noto come U880: fu utilizzato nei computer realizzati da VEB Robotron e VEB Mikroelektronik Mühlhausen, come la serie KC 85, ma anche per computer auto-assemblati come il COMP JU+TER. In Romania era diffuso un altro clone senza licenza, l'MMN80CPU di Microelectronica, utilizzato negli home computer (quali il TIM-S, l'HC ed il COBRA).
Diversi cloni dello Z80 furono realizzati anche nell'Unione Sovietica; uno di questi era il T34VM1, chiamato anche КP1858VМ1 (realizzato parallelamente al clone russo dell'8080, il KR580VM80A): il primo doveva essere usato nelle serie di pre-produzione, mentre il secondo doveva essere utilizzato per le produzioni in larga scala, anche se, a causa del collasso dell'industria microelettronica sovietica di fine anni ottanta, esistono più T34VM1 che КP1858VМ1.
Hitachi sviluppò l'HD64180, un microcodificato e parzialmente dinamico Z80 in CMOS, con le periferiche montate su chip ed una semplice MMU, che gestiva uno spazio indirizzi di 1 MB. Questo chip fu poi realizzato anche da Zilog, inizialmente come Z64180 e poi come Z180, che ha il protocollo del bus ed i timing adattati meglio ai chip periferici dello Z80. Zilog ha continuato a produrre lo Z180 e a migliorarlo: le nuove versioni si chiamano Z8S180/Z8L180, e hanno core pienamente statici, con bassi consumi energetici e ridotte interferenze elettromagnetiche (EMI, elimination of electromagnetic interference).
Toshiba sviluppò le serie di controller intelligenti Z84013/Z84C13 (a 84 pin), e Z84015/Z84C15 (a 100 pin), in pratica dei core Z80 con le sue periferiche in tecnologia NMOS e CMOS, con un temporizzatore di supervisione, funzione di POR ("Power-On-Reset") e generatore di stati d'attesa, tutto sullo stesso chip. Essi furono fabbricati anche da Sharp. Questi processori sono oggi assemblati anche da Zilog.
Lo Zilog Z380, un chip a 32 bit compatibile con lo Z80, introdotto nel 1994, è sopravvissuto durante questi anni; è usato principalmente nei dispositivi per le telecomunicazioni.
Lo Zilog eZ80, pienamente compatibile con lo Z80 con word di 8/16/24/32 bit ed uno spazio indirizzi lineare di 16 MB; è stato introdotto nel 2001. Esiste in diverse versioni, con SRAM o memoria flash integrata, così come con le periferiche montate su chip. Una variante integra su chip un MAC e il software a corredo include uno stack IP. A differenza dello Z800 e dello Z280, presenta solo qualche istruzione aggiuntiva (di cui le principali riguardano i metodi di indirizzamento e quelle per caricare i registri in memoria, con indirizzo variabile a 16/24 bit); rispetto allo Z80, esegue le istruzioni da 2 ad 11 volte più velocemente (con un valore medio di 3-5 volte). È certificato per frequenze di clock fino a 50 MHz.
Kawasaki produsse il KL5C8400, compatibile a livello binario con lo Z80, di cui risulta mediamente 1,2-1,3 volte più veloce e può operare con clock fino a 33 MHz. Kawasaki produsse anche la famiglia KL5C80A1x, con le periferiche ed una piccola memoria RAM integrata nel chip: è efficiente approssimativamente quanto l'eZ80 e può operare fino a 10 MHz (2006).
Alcune famiglie di processori multimediali del costruttore cinese Actions Semiconductor, come l'ATJ2085 ed altri chip, contengono una MCU compatibile con lo Z80 insieme ad un processore DSP dedicato a 24 bit. Questi chip sono utilizzati in molti lettori MP3 e multimediali.
La serie di microcontrollori Toshiba TLCS-900 (principalmente PROM) sono basati sullo Z80, condividendo con questo la struttura base dei registri suddivisi in BC, DE, HL, IX, IY e gran parte delle stesse istruzioni, ma non sono compatibili a livello binario, al contrario della precedente famiglia TLCS 90.
La serie di microcontrollori NEC 78K è basata sullo Z80: essi condividono la stessa struttura base dei registri BC, DE, HL e istruzioni simili (ma con nomi differenti). Non sono compatibili a livello binario con lo Z80.Parzialmente compatibili
I microprocessori/microcontroller Rabbit Semiconductor 2000/3000/4000 sono basati sull'architettura HD64180/Z180, anche se non sono pienamente compatibili a livello binario.Non più in produzione:
L'R800 prodotto da ASCII Corporation fu un veloce processore a 16 bit utilizzato nei computer MSX Turbo R: era compatibile con lo Z80 a livello software ma non a livello hardware (i timing dei segnali, la disposizione ed i segnali dei pin differivano dallo Z80).
Gli Z800, in tecnologia NMOS, e Z280, in tecnologia CMOS, furono implementazioni più veloci dello Z80 (prima dell'arrivo dell'HD64180/Z180), con una MMU capace di gestire uno spazio indirizzi di 16 MB; essi aggiungevano molte variazioni e modalità di indirizzamento al set di istruzioni originali dello Z80. Il primo non fu neanche messo in commercio mentre il secondo non riuscì ad imporsi a causa della sua eccessiva complessità e perché era stato progettato più per l'uso nei minicomputer che nei sistemi embedded. Per contro lo Z80 in versione CMOS era rimasto popolare, a fianco delle famiglie compatibili Z180 ed eZ80.
L'Evatronix CZ80CPU è un core per CPU equivalente allo Z80, disponibile come codice sorgente Verilog o VHDL per i diffusi ASIC o come sorgente EDIF di netlist per i FPGA da Actel, Altera, Lattice o Xilinx.
Versioni libere sono il T80 ed il TV80, disponibili come sorgenti VHDL e Verilog sotto una licenza in stile BSD o LGPL. La versione in VHDL, una volta sintetizzata, può essere impostata fino a 35 MHz su un FPGA Spartan II di Xilinx. Per produzioni su larga scala è comunque più conveniente utilizzare una soluzione tradizionale (o ASIC) piuttosto che un FPGA.
Gli emulatori software degli Z80 girano oggi sui moderni PC molto più velocemente di quanto facesse la CPU Z80 originale: essi sono utilizzati per simulare gli home computer basati sullo Z80 (come l'Amstrad CPC, l'MSX ed il Sinclair ZX Spectrum), o console come il ColecoVision, ma anche negli emulatori di videogiochi (come il MAME) per eseguire i vecchi arcade. Il SIMH emula il computer MITS Altair 8800 sia con processore 8080 che Z80.
Durante la fine degli anni settanta e i primi anni ottanta lo Z80 fu utilizzato in un gran numero di macchine da ufficio basate sul sistema operativo CP/M, una combinazione che dominò il mercato di quel tempo.Due esempi di macchine da ufficio basate sul binomio Z80+CP/M furono il portatile Osborne 1 e la serie Kaypro. Research Machines realizzò i microcomputer 380Z (1977) e LINK 480Z (1981): quest'ultimo era dotato di un'interfaccia di rete proprietaria CHAIN (tipo Ethernet) per il collegamento ad una LAN. Se sulla LAN era presente un file server, il computer poteva avviare da esso un sistema operativo usando il CP/NOS (una versione solo-rete del CP/M), altrimenti poteva avviare il CP/M da un disco e poi accedere ai servizi di rete tramite CP/NET. Altri costruttori di tali sistemi furono TeleVideo, Xerox (serie 820) ed un gran numero di altre società più o meno conosciute. Alcuni sistemi utilizzavano un multitasking software per distribuire un processo fra diversi utenti.
Il Commodore 128 integrava a fianco del MOS 8502 un processore Z80, grazie al quale poteva entrare in una particolare modalità compatibile con il CP/M. Altri computer basati sul MOS 6502 in vendita a quel tempo, come il BBC Micro e l'Apple II, o basati sul MOS 6510, come il Commodore 64, potevano usare lo Z80 alloggiato su un'unità esterna, una scheda aggiuntiva o una cartuccia di espansione, come la SoftCard di Microsoft per l'Apple II: essa era una scheda aggiuntiva particolarmente diffusa ed uno dei pochi prodotti hardware realizzati da Microsoft a quel tempo.
Acer, all'epoca Multitech, introdusse il Microprofessor I nel 1981, un dispositivo per l'apprendimento del linguaggio macchina dello Z80. Attualmente è ancora prodotto e venduto da Flite Electronics Int. (Southampton, Inghilterra) come "Flite's MPF-1B".Lo Z80 fu usato nella famiglia di home computer prodotti da Sinclair. Il Sinclair ZX80 integrava uno Z80 oppure lo μPD780C-1, un clone del processore prodotto da NEC. Questo computer, presentato nel 1980, integrava 1 kB di RAM e 4 kB di ROM, contenenti il sistema operativo ed il linguaggio di programmazione Sinclair BASIC. Il Sinclair ZX81, presentato nel 1981, era un'evoluzione del precedente, rispetto al quale utilizzava uno Z80A ed integrava 8 kB di memoria ROM. Come lo ZX80, anche lo ZX81 delegava alla CPU Z80 la generazione del segnale video. L'erede dello ZX81 fu il Sinclair ZX Spectrum, basato anch'esso sullo Z80A, ma con un hardware migliore: lo ZX Spectrum poteva infatti contare su più RAM (16 kB o 48 kB, a seconda delle versioni), un interprete BASIC più completo (residente su 16 kB di ROM) e su una grafica a colori.
I computer costruiti seguendo lo standard MSX, sviluppato da Kazuhiko Nishi, presidente della società giapponese ASCII Corporation, erano basati su uno Z80 a 3,58 MHz. L'architettura MSX derivava da quella dei computer di Spectravideo, una società americana che commercializzava dei sistemi realizzati in collaborazione proprio con ASCII Corporation. Nishi ottenne la licenza dei computer di Spectravideo e ne rivide l'hardware, creando uno standard che chiamò MSX. A livello di hardware i sistemi MSX erano distribuiti con 16/64 KB di RAM, un processore grafico TMS9918 ed un processore audio AY-3-8910.
Lo Zilog Z80 è stato a lungo un microprocessore molto diffuso nei sistemi embedded e nei microcontroller dove è stato largamente utilizzato fino ai primi anni 2000, sostituito dal suo successore eZ80. Di seguito sono illustrati alcuni usi dello Z80, inclusi i prodotti dell'elettronica di consumo.
Apparecchiature da ufficio (quali fax, segreterie telefoniche e fotocopiatrici) usano spesso lo Z80.
Controller PLC industriali utilizzano lo Z80 in moduli CPU per le funzioni ausiliarie quali l'I/O analogico, o in moduli di comunicazione.
È anche usato in robotica, ad esempio per il riconoscimento vocale e nella sintesi vocale (ad esempio, nel processore M8950 del 1981 di CSELT) e in compiti di basso livello, come unità di controllo dei servomeccanismi per selezionare e posizionare i meccanismi (anni novanta).
I multiplexer RS232 che collegano un gran numero di "terminali" in vecchio stile ai minicomputer o ai mainframe utilizzavano matrici schede Z80 CPU/SIO.
Lo Z80 è stato usato anche nei mixer video usati nelle emittenti TV per operazioni di modifica video in real-time (anni ottanta).
È stato usato anche nei dischi rigidi di Seagate Technology e di altri produttori come controller.
I terminali per le carte di credito delle pompe di benzina in America utilizzavano la CPU Z80 ed i chip PIO (Brevetti USA 4930665, 4962462 e 5602745).
Diverse schede di espansione per PC, come le schede SCSI di Adaptec, hanno utilizzato lo Z80/Z180 ed i loro chip periferici.
I processori Z80/Z180/Z380 sono stati utilizzati in apparecchiature per le telecomunicazioni come i commutatori telefonici ed i modem.
Il commutatore di messaggi di Stofor, utilizzato ampiamente dalle banche e dagli agenti di borsa inglesi negli anni ottanta, era basato sullo Z80.
Dispositivi per la domotica, come i controller wireless degli impianti di annaffiatura o le reti senza fili, usano il sistema opensource N8VEM.
Alcuni etilometri, come l'Intoxilyzer 5000EN, utilizzano una coppia di Z80 (anni 2000).
Diverse calcolatrici scientifiche hanno usato lo Z80, incluse la TI-73 (1998), la TI-81 (1990), la TI-82 (1993), la serie TI-83 (1996), la serie TI-84 (2004), la TI-85 (1995) e la serie TI-86 (1997) di Texas Instruments.
Lo Z80 è stato usato spesso anche nei videogiochi arcade, sia come CPU, sia come coprocessore audio o video. Il gioco Pac-Man (1980) utilizza un singolo Z80 come CPU. Galaxian (1979) ed i giochi arcade come King & Balloon (1980) e Check Man (1982) che usano la scheda madre Namco Galaxian utilizzano tutti lo Z80 come CPU principale. Altri giochi Namco come Galaga (1981) e quelli che utilizzano la scheda madre Namco Galaga, tra cui Bosconian (1981), Dig Dug (1982), Xevious (1982) e Super Xevious (1984), utilizzano 3 processori Z80 in parallelo per la CPU, la gestione della grafica e del suono. La scheda madre Jaleco Master System 32, utilizzata per diversi arcade, utilizza uno Z80 per la gestione del sonoro.
Lo Z80 fu usato anche in alcune console giochi come la ColecoVision (1982), il Sega Master System (1985) e il Sega Game Gear (1990), come coprocessore audio nel Sega Mega Drive (1988) e come controller audio e coprocessore del Motorola 68000 nel Neo Geo di SNK (1990).
I sistemi gioco portatili Game Boy (1989) e Game Boy Color (1998) di Nintendo usavano un processore derivato dallo Z80 con un insieme di istruzioni leggermente differente (i registri indice ed il set di registri alternativi mancavano, ma erano state aggiunte le modalità di indirizzamento con incremento/decremento automatico), prodotto da Sharp Corporation. Il Game Boy Color è capace di raddoppiare il clock della CPU quando esegue software specifico per questo modello. La serie Game Boy Advance (2001) originariamente includeva questo Z80 modificato per motivi di retrocompatibilità, ma in seguito questa CPU fu eliminata quando fu presentato il Game Boy Micro.
In Russia lo Z80 e i suoi cloni furono usati largamente in telefonia nelle linee telefoniche terrestri con Caller ID.
Alcuni sequencer MIDI come l'E-mu 4060 Polyphonic Keyboard and Sequencer (1977)  ed il Roland MSQ700 (1984), erano costruiti intorno allo Z80.
Anche alcuni controller e commutatori MIDI, come il Waldorf Midi-Bay MB-15, usavano lo Z80 (1990).
Alcuni sintetizzatori analogici polifonici integravano lo Z80 come scanner della tastiera (ma anche per gestire le manopole delle impostazioni, i display e altro) e nei convertitori D/A o nei controlli PWM dei livelli analogici; nei sistemi più recenti è stato usato alle volte per gestire le comunicazioni tra i dispositivi MIDI. Lo Z80 è stato spesso utilizzato anche per generare il suono, implementando un oscillatore a bassa frequenza o un sintetizzatore. Alcuni esempi sono:
i sintetizzatori Prophet 5 (1978), Prophet 10 (1980), Prophet 600 (1982), Six-Trak (1984), Multitrak (1985), MAX (1984) e Split-8 (1985) di Sequential Circuits;
Sintetizzatori/campionatori digitali come l'E-MU Emulator I (1981), l'Emulator II (1984) ed il campionatore a 12 bit Akai S700 (1987).
Drum machine come l'E-mu SP-12 (1985), l'E-mu SP-1200 (1987), l'E-mu Drumulator (1983) ed il Drumtraks (1984) di Sequential Circuits usavano i processori Z80.
Molti riverberatori digitali della Lexicon di fine anni ottanta (PCM70, LXP15, LXP1, MPX100) usavano uno o più Z80 per l'interfaccia utente e l'oscilloscopio a bassa frequenza; le funzioni sul segnale digitale erano poi eseguite da hardware dedicato.
Il preamplificatore per chitarra con controller MIDI a valvole ADA MP-1 (1988) usava lo Z80.
Patrizio Sesto Rubino, Giuseppe Pranzo Zaccaria, Il nuovo manuale Z80, Editrice Il Rostro, 1982. ISBN non esistente
(EN) Zilog Z-80 Data Book (PDF), Zilog, 1978. URL consultato il 20 luglio 2009 (archiviato dall'url originale il 18 ottobre 2010). ISBN non esistente
(EN) Alexander John Anderson, Foundations of Computer Technology, 1ª ed., CRC Press,, 8 settembre 1994, ISBN 0-412-59810-8.
(EN) Bruce A. Artwick, Microcomputer interfacing, Prentice-Hall, 1980, ISBN 978-0-13-580902-0.
(EN) Jan Axelson, Embedded ethernet and internet complete, Lakeview research, 2003, ISBN 978-1-931448-00-0.
(EN) Mark Balch, Digital Fundamentals, in Complete Digital Design: A Comprehensive Guide to Digital Electronics and Computer System Architecture, McGraw-Hill Professional, 2003, ISBN 0-07-140927-0.
(EN) Gerald W. Brock, The second information revolution, Harvard University Press, 2003, ISBN 978-0-674-01178-6.
(EN) Wai-Kai Chen, 61.4 - Microprocessor Based Degins: Interfacing, in The circuits and filters handbook, 2ª ed., CRC Press, 2002, ISBN 978-0-8493-0912-0.
(EN) Steve Ciarcia, Build your own Z80 computer: design guidelines and application notes, BYTE, ottobre 1981, ISBN 0-07-010962-1.
(EN) Commodore Business Machines, Commodore 128: Programmer's Reference Guide, Bantam Books, 1986, ISBN 978-0-553-34292-5.
(EN) Daniel Sánchez-Crespo Dalmau, Core techniques and algorithms in game programming, New Riders, 2004, ISBN 978-0-13-102009-2.
(EN) Robert A. Froehlich, Free software catalog and direct, Crown Publishers, 1984, ISBN 978-0-517-55448-7.
(EN) Joe Grand et al., Game console hacking: Xbox, PlayStation, Nintendo, Game Boy, Atari, & Sega, Syngress, 2004, ISBN 978-1-931836-31-9.
(EN) Steve Heath, Embedded systems design, 2ª ed., Newnes, dicembre 2002, ISBN 978-0-7506-5546-0.
(EN) Herman Holtz, Computer work stations - A Manager's Guide to Office Automation and Multi-User Systems, Chapman and Hall, 1985, ISBN 978-0-412-00491-9.
(EN) Kamal Hyder, Bob Perrin, Embedded systems design using the Rabbit 30000 microprocessor, Newnes, 2004, ISBN 978-0-7506-7872-8.
(EN) Dennis Longley, Michael Shain, Expanding and networking microcomputers: the complete and up to date guide to over 600 boards for Apple and IBM PCs, MacMillan Press, 1985, ISBN 978-0-333-38006-2.
(EN) Aditya P. Mathur, Introduction to Microprocessors, 3ª ed., McGraw Hill, 1990, ISBN 978-0-07-460222-5.
(EN) Alex Meystel, Autonomous mobile robots: vehicles with cognitive control, World Scientific, 1991, ISBN 978-9971-5-0089-4.
(EN) Klaus Miesenberger, Computers Helping People with Special Needs, Springer-Verlag, 2008, ISBN 978-3-540-70539-0.
(EN) Ross P. Nelson, The 80386 book: assembly language programmer's guide for the 80386, Microsoft Press, 1989, ISBN 978-1-55615-138-5.
(EN) Michael Nitsche, Games and Rules, in Video Game Spaces: Image, Play, and Structure in 3D Worlds, MIT Press, 2009, ISBN 0-262-14101-9.
(EN) Julio Sanchez, Maria P. Canton, Software solutions for engineers and scientists, CRC Press, 2008, ISBN 978-1-4200-4302-0.
(EN) Leo J. Scanlon, 8086/8088/80286 assembly language, Brady Books, 1978, ISBN 978-0-13-246919-7.
(EN) Ian R. Sinclair, Practical electronics handbook, 5ª ed., Newnes, 2000, ISBN 978-0-7506-4585-0.
(EN) Rodnay Zaks, Programming the Z80, 3ª ed., Sybex Inc., 1981, ISBN 978-0-89588-069-7.
Franco Maddaleno, Nuove istruzioni dello Z-80 (JPG), in Bit (Milano, Gruppo Editoriale Jackson), anno 2, nº 3, giugno/agosto 1979,  pp. 43-48, ISSN 0392-8837.
(EN) History of the 8-bit: travelling far in a short time, in InfoWorld (InfoWorld Media Group), vol. 4, nº 47, 29 novembre 1982,  pp. 58-60, ISSN 0199-6649.
(EN) Federico Faggin, The Birth of the Microprocessor - My Recollections (intel4004.com), 15 ottobre 2001. URL consultato il 4 ottobre 2010.
(EN) Zilog, Z180 Family Questions and Answers (PDF), marzo 1994. URL consultato il 9 novembre 2010 (archiviato dall'url originale il 5 gennaio 2009).
(EN) Zilog, Zilog product specification - Z8400/Z84C00 NMOS/CMOS Z80 CPU Central Processing Unit (PDF) (Z80.info). URL consultato il 21 agosto 2010.
(EN) SLR Systems, Z80 Relocating Macro Assembler User's Guide (PDF), 1984 (archiviato dall'url originale il 20 luglio 2011).
(EN) InfoWorld Media Group, Macro-Mon, an advanced monitor for the TSR-80, in InfoWorld, vol. 4, nº 24, 21 giugno 1982.
(EN) John C. Dvorak, After CP/M, object oriented operating systems may lead the field, in InfoWorld (InfoWorld Media Group), vol. 4, nº 18, 10 maggio 1982.
(EN) Marty Petersen, Review: Premium Softcard IIe, in InfoWorld (InfoWorld Media Group), vol. 6, nº 6, 6 febbraio 1984.
(EN) Midway Games, Game Board Schematic (PDF), in Midway Pac-Man Parts and Operating Manual, dicembre 1980. URL consultato il 9 novembre 2010.
(EN) Midway Games, Game Logic Schematic (PDF), in Midway Galaxian Parts and Operating Manual, febbraio 1980. URL consultato il 9 novembre 2010.
(EN) Midway Games, Schematics and Wiring Diagrams (PDF), in Midway Galaga Parts and Operating Manual, ottobre 1981. URL consultato il 9 novembre 2010.
(EN) Electronic Christmas, Zappy New Year, in InfoWorld (InfoWorld), vol. 4, nº 50, 20 dicembre 1982.
(EN) Japanes computer firms in court again, in New Scientist (Reed Business Information Ltd), 5 maggio 1983. URL consultato il 9 novembre 2010.
(EN) Zilog, Inc., Zilog Z8S180/Z8L180 (PDF), 2000. URL consultato il 12 novembre 2010.
(EN) Zilog, Inc., eZ80 CPU User Manual (PDF), 2008. URL consultato il 12 novembre 2010.
(EN) A. El-Hajj, K.Y. Kabalan; M. Mneimneh; F. Karablieh, Microprocessor simulation and program assembling using spreadsheets, in Simulation, vol. 75, nº 2, agosto 2000,  pp. 82-90, DOI:10.1119/1.14604.
(EN) K. Nagasawa, K. Taki; H. Tamemoto; B.Y. Lee; H. Tanaka; S. Imai; Y. Kajikawa; D. Azuma, Design and evaluation for super low power Z80 with pass-transistor logic, in Sharp Technical Journal, vol. 67, aprile 1997,  pp. 35-40.
(EN) W. Lunscher, Semaphore Strategy For Z80, in IEEE Micro (IEEE), vol. 5, nº 3, 1985,  p. 4, DOI:10.1109/MM.1985.304535.
(EN) M. Smith, B.E. Luff, Automatic Assembler Source Translation From The Z80 To The Mc6809, in IEEE Micro (IEEE), vol. 4, nº 2, 1984,  pp. 3-9, DOI:10.1109/MM.1984.291314.
(EN) H.B. Diab, I. Demashkieh, A computer-aided teaching package for microprocessor systems education, in IEEE Transactions on Education (IEEE), vol. 34, nº 2, maggio 1991,  pp. 179-183, DOI:10.1109/13.81598.
(EN) M.H. Nehrir, A.J. Odermann; B.D. Bowen, A microcomputer-microprocessor-based DC motor speed controller for undergraduate electric machinery laboratory, in IEEE Transactions on Education (IEEE), vol. 33, nº 4, novembre 1990,  pp. 341-345, DOI:10.1109/13.61087.
(EN) C. D. Spencer, P. F. Seligmann, Microcomputers as digital electronics, in American Journal of Physics (AAPT), vol. 54, nº 5, maggio 1986,  pp. 411-415, DOI:10.1119/1.14604. URL consultato il 3 settembre 2010 (archiviato dall'url originale il 23 febbraio 2013).
(EN) Trevor N. Mudge, Gregory D. Buzzard, Teaching Assembly Language Programming With ZIP, A Z80 Assembly Language Interpreter Program, in IEEE Transactions on Education (IEEE), vol. 26, nº 3, 1983,  pp. 91-98, DOI:10.1109/TE.1983.4321615.
(EN) F.O. Otieno, B.O. Kola; F. N. Onyango, On-line determination of thermophysical properties in an absorption calorimeter, in Measurement Science & Technology (IOP), vol. 8, nº 3, marzo 1997,  pp. 239-244, DOI:10.1088/0957-0233/8/3/004.
(EN) S. Altieri, F. Fossati; A. Lanza; T. Pinelli, An Automated-System to Control the Polarization Voltage of Silicon Detectors, in IEEE Transactions on Nuclear Science (IEEE), vol. 42, nº 2, aprile 1995,  pp. 57-60, DOI:10.1109/23.372132.
(EN) F.M. Xiao, S. Li, A Front-End Data Acquisition-System for Mossbauer-Spectroscopy, in Hyperfine Interactions (Springer Netherlands), vol. 71, 1992,  pp. 1531-1534, DOI:10.1007/BF02397372.
(EN) T. Brenner, S. Buttgenbach; T. Fabula; W. Rupprecht, Real-time data acquisition system for laser and radio frequency spectroscopy, in J. Phys. E: Sci. Instrum. (IOP), vol. 21, 1988,  pp. 1150-1153, DOI:10.1088/0022-3735/21/12/005.
(EN) P.M. Kennedy, Z.H. Stachurski, A novel semi-contact extensometer based on Z80 microprocessor, in J. Phys. E: Sci. Instrum. (IOP), vol. 19, 1986,  pp. 115-118, DOI:10.1088/0022-3735/19/2/003.
(EN) L. Thomas, W. Bunn; S. Woodward; T. Baer, Design and operation of a 12.5-ns multichannel scaler, in Review of Scientific Instruments (AIP), vol. 55, nº 11, novembre 1984,  pp. 1849-1853, DOI:10.1063/1.1137678. URL consultato il 3 settembre 2010 (archiviato dall'url originale il 23 febbraio 2013).
(EN) K. L. Sala, R. LeSage; R. W. Yip, S-100/Z80 microprocessor-based scanning microdensitometer and signal processing system, in Review of Scientific Instruments (AIP), vol. 53, nº 11, novembre 1982,  pp. 1682-1684, DOI:10.1063/1.1136870. URL consultato il 3 settembre 2010 (archiviato dall'url originale il 23 febbraio 2013).
Z80-Family Pagina di supporto ufficiale – creata da Thomas Scherrer, mantenuta da Gaby Chaudry
YAZE-AG (Yet Another Z80 Emulator by AG) – emulatore per Unix(Solaris), Linux, FreeBSD, Macintosh e Windows
DEEDS – Suite di simulatori per la progettazione digitale ad uso didattico – simula anche sistemi a microprocessore basati sul DMC8 (CPU a 8 bit derivata dallo Z80); esporta i progetti in VHDL e su FPGA (liberamente scaricabile)
Core gratuito della CPU Z80 in codice VHDL oppure in codice Verilog – da OpenCores.org
Tutte le caratteristiche non documentate dello Z80 – creato da Sean Young (su http://www.myquest.nl/z80undocumented/)
 SBC N8VEM, su uelectronics.info. URL consultato il 3 settembre 2010 (archiviato dall'url originale il 31 gennaio 2010).
 V6Z80P - Moderno home computer con lo Z80 come processore, su retroleum.co.uk. URL consultato il 10 novembre 2010 (archiviato dall'url originale il 10 novembre 2010).
 Manuale di riferimento dello Z80 con la descrizione delle istruzioni del processore (PDF), su zilog.com.
