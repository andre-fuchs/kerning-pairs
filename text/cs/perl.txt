Perl (výslovnost [purl] či [pɜːl] IPA) je interpretovaný programovací jazyk vytvořený Larry Wallem v roce 1987. S rozvojem internetu se Perl stal velmi populárním nástrojem pro tvorbu CGI skriptů.
Perl zahájil svou éru jako skriptovací jazyk, náhrada jazyka AWK a interpretru sh. Největšího rozšíření dosáhl ve verzi 4 z roku 1991.
Verze 5 přinesla četná vylepšení, především výkonné datové struktury a možnost objektového programování. V poslední době získal Perl oblibu mimo jiné v bioinformatice. PC Magazine zařadil Perl v roce 1998 mezi finalisty soutěže Technical Excellence Award v kategorii Development Tool. Slovo Perl najdete v Oxford English Dictionary.
Larry Wall se při konstrukci jazyka řídil heslem „dá se to udělat více způsoby“ (anglicky there's more than one way to do it). Umožňuje psát krátké programy jednoduše a rychle a přitom nebrání v psaní těch složitých. Jeden ze způsobů je přitom obvykle velmi stručný, takže Perl získal nezaslouženou pověst jazyka, ve kterém se tvoří nesrozumitelný a neudržovatelný kód. Tato kritika ale není oprávněná, Perl je vhodný k řešení malých i velkých problémů. Schopnosti a nástroje, které se používají u velkých projektů, lze použít i v krátkých skriptech.
Dobrý programátor má podle Larryho Walla být líný, netrpělivý a sebevědomý (Laziness, Impatience and Hubris).
výhody „interpretovaného“ jazyka, především rychlý vývoj bez nutnosti kompilace a linkování – program je zkompilován po každém spuštění a je kdykoli možné „přikompilovat“ další kód. Je možno i provést část kódu před kompilací zbytku a nastavit tak konstanty, které následně může využít optimalizační část kompilace. A například vynechat kód pro ladicí výpisy, pokud není program spuštěn s určitým parametrem.
přes 18 000 volně dostupných modulů třetích stran v Comprehensive Perl Archive Network CPAN. Pojmenování, kategorizace, dokumentace, testování a instalace modulů jsou standardizovány. Moduly zpřístupňují prakticky veškerá dostupná rozhraní a knihovny.
efektivita programování – v programech, které nejsou přímo závislé na rychlosti běhu, je výhodnější jazyk, který vyžaduje méně řádek kódu
automatická práce s pamětí (není třeba explicitně alokovat a uvolňovat paměť) a pokročilé datové typy např. asociativní pole neboli hash (lineární seznamy a binární stromy již nejsou třeba)
Perl je svobodný software, licencován pod Artistic License nebo GNU General Public License
snadné spojování již hotových komponent (modulů) stejně jako u Delphi, Visual Basicu, PowerBuilderu, Tcl, Microsoft Office, Emacs, atd. a navíc s možností širokého použití (Linux, Unix, MS Windows, VMS, Palm OS, Apache, ASP, CGI, ISAPI, OLE, WSH, WSC, wxPerl, atd.)
převzetí osvědčených konstrukcí z ostatních jazyků, jako např. C, AWK, sed, sh, BASIC, funkcionální jazyky (uzávěry, funkce jako parametry nebo návratové hodnoty, …) a dalších
eval (možnost využít funkce překladače za běhu programu, takže můžeme vytvářet dynamický kód, resp. kód optimalizovat na rychlost za běhu)
možnost použití inline C/C++ v Perlu nebo rozhraní Perlu pro externí C/C++ knihovny skrz XS nebo SWIG
automatické zavádění (pokud jméno funkce neexistuje, pak Perl umožňuje spuštění definovaného kódu)
mod perl umožňuje web serveru Apache vložení Perlu s výhodami, jako je při vložení PHP
interpret Perlu může být vložen (embedded) do ostatních systémů, #include <Perl.h>
nedisciplinovaný programátor může extrémně snadno vytvářet nesrozumitelný kód (jazyk velice benevolentní)
při některých aplikacích se může projevit neefektivnost dynamicky typovaného jazyka ve srovnání se staticky typovanými jazyky, zejména spotřeba paměti
kruhové odkazy a problematika jejich destrukce (použití reference counting garbage collectoru vyžaduje použití destruktorů, které přeruší kruh nebo používání weak [wiːk] referencí, které nezvyšují hodnotu čítače referencí)
mnozí tvrdí, že jde o jazyk nevhodný pro výuku programování, ostatním use strict;. Při použití ve výuce hrozí, že si student zvykne, že se o spoustu věcí nemusí starat a přechod na nižší jazyk pak bolí
syntaxe perlu 5 je tak složitá, že neexistuje samostatný parser ani formální definice syntaxe jazyka; jediný parser perlu řady 5 je samotný interpret perlu, ani programátorské editory Vim a Emacs neumí pro perl korektně zvýrazňovat syntaxi
jazyk obsahuje funkce typu typemap, která dovoluje provést kód stejně jako funkce eval()
V červenci roku 2000, hned po setkání, na kterém byl odstartován projekt vývoje jazyka Perl 6, byla započata práce na návrhu virtuálního stroje (VM – Virtual Machine) s názvem Parrot. Parrot je určen pro efektivní běh dynamických programovacích jazyků (primárně pro Perl 6). Jádro nové verze jazyka Perl tak bude kompletně přepsáno jako tomu bylo např. u projektu Mozilla. Také syntaxe jazyka se dosti zásadně změní a úplná zpětná kompatibilita bude zaručena jinými prostředky.
Vysvětlení: print; v podstatě znamená print $_;, kde $_ je výchozí proměnná. s/\d+/-1/; (nebo také $_ =~ s/\d+/-1/;) je regulární výraz, jenž nahradí první nalezenou sekvenci číslic (celé číslo) číslem −1.
Perl je dynamický programovací jazyk. Je možné používat kompilátor v samotném programu. Tady je příklad kalkulačky v jednom řádku kódu:
Perl do verze 5.20 (květen 2014) neumožňoval tradiční způsob předání parametrů funkci. Hodnoty předávané při volání funkce jsou uloženy v poli @_ a programátor si musel sám zkontrolovat kolik a jakých parametrů funkce dostala a uložit si je do lokálních proměnných. Samozřejmě existují knihovny, s jejichž pomocí je možné nadeklarovat validaci, výchozí hodnoty a podobně.
Práce s proměnnými je v Perlu poněkud odlišná od kompilovaných jazyků (C/C++, Pascal):
Následující program [1] slouží jako malá ukázka, čeho je tento jazyk schopen. Program vypíše poměrně pomalu slova: Just another Perl / Unix hacker. Za tím účelem vytvoří 32 paralelních procesů, které složitě synchronizuje pomocí rour.
Toto samozřejmě není doporučený ani obvyklý způsob zápisu programů v Perlu, ale pouze ukázka schválně neoptimálního kódu.
WALL, Larry; SCHWARTZ, Randal L.; CHRISTIANSEN, Tom. Programování v jazyce Perl (původním názvem: Programming Perl). Překlad Martin Blažík; Editor ing. Martina Mojzesová; Odborná korektura ing. Bohumil Michal; Jazyková korektura Josef Novák. 1. vyd. Praha: Computer Press, 1997. 683 s. ISBN 80-85896-95-8. (česky) Pozn. o autorech. SRINIVASAN, Sriram. Programování v Perlu pro pokročilé: základy a techniky pro vývojáře (původním názvem: Advanced Perl programing). Překlad Martin Blažík; Editor Ivo Magera; Jazyková korektura Libor Vyhnálek. 1. vyd. Praha: Computer Press, 1998. 412 s. ISBN 80-7226-079-0. (česky) LEMAY, Laura. Naučte se Perl za 21 dní (původním názvem: Teach yourself Perl in 21 days). Překlad Bogdan Kiszka a Jaroslav Černý; Jazyková korektura Eva Bublová; Odpovědný redaktor Ivo Magera; Technický redaktor Jiří Matoušek. 1. vyd. Praha: Computer Press, 2002. 546 s. (Rychle a jistě. Internet). ISBN 80-7226-616-0. (česky) Přeloženo z angličtiny. KYSELA, Martin. Perl: kompletní kapesní průvodce programátora. Odpovědný redaktor Miroslav Lochman. 1. vyd. Praha: Grada, 2005. 134 s. ISBN 80-247-1170-2. (česky) DAŘENA, František. Myslíme v jazyku PERL. Odpovědný redaktor Miroslav Lochman. 1. vyd. Praha: Grada, 2005. 700 s. (Knihovna programátora). ISBN 80-247-1147-8. (česky) Obsahuje bibliografii, bibliografické odkazy a rejstřík.
(anglicky) metacpan.org – bohatá kolekce software, modulů, skriptů a dokumentace
