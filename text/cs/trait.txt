V programování je trait způsob návrhu použitý v objektově orientované programování: trait reprezentuje kolekci metod, které mohou být použity pro rozšíření funkcionalit tříd.
Trait se velmi podobá třídě vytvořené pouze z konkrétních metod použitých pro rozšíření jiné třídy obdobným způsobem, jako je vícenásobné dědění, ale klade důraz na řešení konfliktů názvů za použití podpory samotného programovacího jazyku při následném propojování.
Traity poskytují „jednoduchý konceptuální model pro strukturu objektově orientovaného programování“ podobný mixins. Traity poskytují jednoduchý způsob jak vytvořit třídy, které znovupoužívají chování jiné softwarové komponenty.
Traity jsou něco mezi rozhraním a mixinem: rozhraní je tvořeno pouze názvy metod, zatímco trait obsahuje kompletní definice metod, na druhé straně mixin obsahuje (kromě definic metod) také stav, za pomoci proměnných, což traity většinou nemívají.
Rozhraní je používáno třídou, která implementuje jeho metody. Mixin je používán třídou promícháním sebe samého a všech jeho vlastností: i.e. atributy, metody.
Trait je používán třídou sloučením kolekcí extra metod poskytovaných s určitým mechanismem řešícím konflikty názvů.
Tedy objekt definován jako trait je vytvořen jako sloučenina metod, které mohou být použity jinými třídami, bez nutnosti použití vícenásobného dědění.
V případě kolize jmen, kdy jeden nebo více traitů mají být použity třídou obsahující metodu stejného jména, musí programátor explicitně tento konflikt vyřešit definováním, která z metod bude ve třídě použita; tedy sám vyřešit „diamantový problém“ opakované dědictví. Toto je rozdílné od jiných skládacích metod v objektově orientovaném programování, kde konflikty jmen jsou automaticky řešeny pravidly proměnných.
Zatímco mixiny mohou být použity pouze za pomocí dědičných operací, traity poskytují mnohem širší výběr operací, včetně:
přepsání (nebo asymetrický součet): operace, která vytvoří nový trait přidáním dalších metod, případně přepsání již existujících metod existujícího traitu
a vyloučení: operace, která vytvoří nový trait odstraněním metody z existujícího traitu. (V kombinaci s operací alias získáme operaci mělké přejmenování).Trait se liší od rozhraní tím, že poskytuje implementaci metod, nikoli pouze signaturu metod.
Traity pocházejí z Self programming language a jsou podporovány následujícími programovacími jazyky:
D: použitím __traits language extension a std.traits modulu pomocných šablon, pro kompilaci časových traitů. Dostupné v D 2 od verze 2.003, s pozdější přidanou funkcionalitou. Dohromady s dalšími vlastnostmi jazyka (templety a mixiny) umožňují flexibilní automatické generování metod založených na struktuře interface a typů. D také umožňuje explicitní čištění od členských metod a proměnných, včetně forwardingu do vícero členských tříd.
Groovy: Od verze 2.3Traity pro Smalltalk programovací jazyk byly původně vytvořeny Software Composition Group, University of Bern. AmbientTalk kombinuje vlastnosti ze Self traitů (objektově orientovaná vícenásobná dědičnost a Smalltalk Squeak traity (vyžadující explicitní složení traitů programátorem); AmbientTalk staví na výzkumu v oblasti stateful a freezable traitů pro umožnění stavů uvnitř traitů, což nebylo umožněno v prvních definicích.Koncept byl aplikován jako knihovny do hlavních programovacích jazyků, jako C++, PHP a Javascript.
Mohou být vnořeny, nicméně vnoření nemá žádnou sémantiku pro třídy.Vnořené traity jsou ekvivalentní flattened traitům.
Abstraktní třídy jako mixiny ve vícenásobné dědičnosti programovacího jazyka Curl povolují implementaci metody a tudíž představují
traity jiného jména. Modul mixiny v Ruby jsou do určité míry podobné traitům. Racket podporuje traity jako knihovnu a používá makra, struktury a first-class třídy k implementaci.
V počítačovém programování trait třída je třída šablona použitá k asociaci stavu a/nebo chování ke compile-time entitě, typicky datový typ nebo konstanta, bez modifikace existující entity. V C++ programming language a PHP programming language, je běžně dosahováno definováním primární šablony třídy a vytvořením explicitní nebo částečných specializací pro relevantní typy.
Je použitá v Standard Template Library a v Standardní knihovna jazyka C pro podporu generických container třídách. Technika je značně používaná v Boost TypeTraits knihovně.
Traity fungují odlišně v PHP. Od verze 5.4.0, PHP umožňuje uživatelům určit šablonu, která poskytuje možnost dědit z více než jedné (trait-)třídy, jako pseudovícenásobná dědičnost. Traity v PHP nejsou tolik dynamické jako v C++ v používání datových typů.
Od verze 5.4.0 PHP umožňuje traity. Tento příklad používá jednu šablonovou třídu (trait) pro rozšíření jiné třídy:
The many talents of JavaScript for generalizing Role Oriented Programming approaches like Traits and Mixins, April 11, 2014