C++ je multiparadigmatický programovací jazyk, který vyvinul Bjarne Stroustrup a další v Bellových laboratořích AT&T rozšířením jazyka C. C++ podporuje několik programovacích stylů (paradigmat) jako je procedurální programování, objektově orientované programování a generické programování, není tedy jazykem čistě objektovým. V současné době patří C++ mezi nejrozšířenější programovací jazyky.
Starší verze jazyka, společně označované jako „C with Classes“ (česky C s třídami), byly používány od roku 1980. Jméno C++ vymyslel Rick Mascitti v létě 1983. Toto jméno zdůrazňuje evoluční povahu změn oproti jazyku C; „++“ je operátor inkrementace v C. Kratší jméno „C+“ je syntaktická chyba a bylo též použito jako jméno jiného nesouvisejícího jazyka.
Přestože byl jazyk vyvíjen již od počátku 80. let, první oficiální norma C++ byla přijata v roce 1998, další v roce 2003 (INCITS/ISO/IEC 14882-2003). V roce 2006 a 2007 byly přijaty některé aktualizace. Standard označovaný jako C++11, značně rozšířil C++ a byl přijat organizací ISO v září 2011 jako ISO/IEC 14882:2011. Současný standard je C++17 (ISO/IEC 14882:2017).
Jazyk C je až na několik jasně definovaných výjimek podmnožinou C++. Jak uvádí Bjarne Stroustrup, všechny programy uvedené ve slavné učebnici jazyka C The C Programming Language od Briana W. Kernighana a Dennise M. Ritchieho jsou zároveň programy v C++.
První překladače C++ byly preprocesory, které překládaly z C++ do čistého C. Považovat jazyk C++ za pouhé rozšíření jazyka C by ale bylo chybou, protože není s jazykem C zcela kompatibilní. Některé programy v jazyce C nelze překládat překladači pro C++.
Koncepce objektů jazyka C++ byla převzata z jazyka Simula 67. Objekty (třídy) jsou pojaty jako přirozené rozšíření datových struktur jazyka C o možnost vkládání členských funkcí. C++ umožňuje řídit viditelnost složek objektů pro ostatní části programu.
V C++ existuje na rozdíl od jiných jazyků vícenásobná dědičnost, tj. třída C může dědit od třídy A i B. Pro případ, že by třídy B a C dědily od A a třída D dědila od B i C je nutno u tříd B a C použít virtuální dědění. Kromě virtuální dědičnosti má ještě C++ tři druhy klasické dědičnosti:
protected (chráněná), veřejné a chráněné složky základní třídy budou v odvozené třídě chráněné
private (soukromá), veřejné a chráněné složky základní třídy budou v odvozené třídě soukromé
C++ umožňuje překrývat metody v základních třídách metodami z rozšířených tříd. Tento mechanismus se jmenuje polymorfismus. Pro využití polymorfismu je nutné v základní třídě u polymorfické metody uvést klíčové slovo virtual. Polymorfismus je podobný přetěžování, ale u přetěžování probíhá rozhodování o tom, která metoda se bude volat při překladu, u polymorfismu až za běhu.
Run-Time Type Information resp. Run-Time Type Identification je způsob, jakým se v C++ získávají informace o typu objektu za běhu programu. RTTI se skládá z dvou hlavních částí, operátoru informací o typu typeid a operátoru přetypování dynamic_cast<>.
Statické přetypování – static_cast<typ>(výraz) – slouží k přetypování primitivních typů nebo rychlému přetypování objektů. Vzhledem k tomu, že neprobíhají při přetypování kontroly je doporučeno takto přetypovat pouze objekty, u kterých je již při kompilaci známo, že je lze přetypovat na cílový typ.
Dynamické přetypování – dynamic_cast<typ>(výraz) – slouží k přetypování ukazatelů nebo referencí na objekty. Při přetypování dochází ke kontrolám, v případě chyby při přetypování ukazatelů je vrácena hodnota NULL, v případě chyby při přetypování referencí je vyhozena výjimka std::bad_cast.
Obecné přetypování – reinterpret_cast<typ>(výraz) – slouží k přetypování nesouvisejících dat. Například pole znaků je takto možné přetypovat na strukturu se stejným počtem znaků.
Konstantní přetypování – const_cast<typ>(výraz) – umožňuje přidávat a odebírat modifikátory const a volatile.C++ také podporuje přetypování (typ)výraz převzaté z jazyka C.
Šablony rozšiřují znovupoužitelnost kódu, neboť umožňují napsat kód se zcela obecným (neurčeným) datovým typem. Jiné jazyky mohou dosáhnout stejné funkcionality použitím kořene objektové hierarchie nebo genericitou.
Jazyk C++ umožňuje deklarovat více funkcí se stejným názvem. Kompilátor určí správné volání podle počtu a typu argumentů. Tato technika se nazývá přetěžování funkcí. Velmi silnou vlastností jazyka je i možnost přetěžovat standardní operátory (například '+' nebo '=') a tak přirozeně využívat tyto operátory pro nově vytvářené třídy a tvorbu abstraktních datových typů.
Standard jazyka C++ z roku 1998 se skládá ze dvou částí: popis jazyka a standardní knihovny. Standardní knihovna jazyka C++ obsahuje mírně modifikovanou verzi standardní knihovny jazyka C a Standard Template Library (STL).
STL obsahuje velké množství užitečných datových struktur a algoritmů, jako například vektory (dynamické pole), spojové seznamy, iterátory, zobecněné ukazatele, (multi)mapy, (multi)sety. Všechny tyto struktury mají konzistentní rozhraní. S použitím šablon je pak možné programovat generické algoritmy schopné pracovat s kterýmkoliv kontejnerem nebo sekvencí definovanou iterátory.
Používání standardní knihovny – například používání std::vector nebo std::string místo polí ve stylu jazyka C – může vést k bezpečnějšímu a lépe škálovatelnému softwaru.
STL byla původně vytvořena a používána firmou Hewlett-Packard a později také Silicon Graphics. Standard se na ni neodkazuje jako na „STL“, ale jen jako na část standardní knihovny, přesto mnoho lidí stále používá tento pojem na odlišení od ostatních částí knihovny.
Většina překladačů poskytuje implementaci standardu C++ včetně STL. Existují také implementace standardu nezávislé na kompilátoru (např. STLPort). Jiné projekty také vytvářejí různé zákaznické implementace knihovny jazyka a STL s různými cíli návrhu.
Pro zkrácení kódu je uvedena deklarace a definice tříd najednou. Správně by deklarace měla být v hlavičkovém souboru, definice v souboru s kódem. Navíc je doporučeno, aby každá třída byla v samostatném souboru.
Ve standardní knihovně jsou k dispozici algoritmy pro práci s datovými strukturami. Na příkladu je pomocí standardních algoritmů vygenerována a vypsána Fibonacciho posloupnost.
STROUSTRUP, Bjarne. The C++ Programming Language. 4th edition. vyd. [s.l.]: Addison-Wesley, 2013. ISBN 978-0-321-56384-2. (anglicky) 
 The C++ Standard: Incorporating Technical Corrigendum No. 1. [s.l.]: John Wiley & Sons Inc, 2003. 816 s. ISBN 978-0-470-84674-2. (anglicky) 
KERNIGHAN, Brian; RITCHIE, Dennis. The C Programming Language. 2nd edition. vyd. [s.l.]: Prenctice Hall, 1988. Dostupné v archivu pořízeném dne 2012-12-02. ISBN 0-13-110370-9. (anglicky) 
VIRIUS, Miroslav. Programování v C++. 2. vydání. vyd. Praha: České vysoké učení technické, 2004. ISBN 80-01-02978-6. 
JONES, Bredley; LIBERTY, Jesse. Naučte se C++ za 21 dní. 2. aktualizované vydání. vyd. [s.l.]: Computer Press, 2007. 800 s. ISBN 978-80-25-11583-1. 
ŠALOUN, Petr. Programovací jazyk C++ pro zelenáče. Praha: Neocortex, 2005. ISBN 80-86330-18-4. 
KOENIG, Andrew; MOO, Barbara. Rozumíme C++. [s.l.]: Computer Press 412 s. ISBN 978-80-72-26656-2. 
MATOUŠEK, David. C++ Builder 4.0, 5.0 a 6.0 – vývojové prostředí, 1. díl. 1. české. vyd. [s.l.]: BEN – technická literatura 688 s. ISBN 978-80-7300-269-5. 
MATOUŠEK, David. C++ Builder 4.0, 5.0 a 6.0 – vývojové prostředí, 2. díl. 1. české. vyd. [s.l.]: BEN – technická literatura 576 s. ISBN 978-80-7300-270-1. 
MATOUŠEK, David. C++ Builder 4.0, 5.0 a 6.0 – vývojové prostředí, 3. díl. 1. české. vyd. [s.l.]: BEN – technická literatura 616 s. ISBN 978-80-7300-271-8. 
STROUSTRUP, Bjarne. C++ Programovací jazyk. 1.. vyd. [s.l.]: BEN – technická literatura ISBN 80-86056-20-1, ISBN 80-90150-72-1.
(anglicky) stroustrup.com – domovská stránka Bjarne Stroustrupa; mimo jiné uvádí historii C++, odpovědi na často kladené otázky a podrobný glosář. Jde o základní zdroj informací a odkazů věnovaných C++.
(anglicky) Thinking in C++ – dvoudílná učebnice od Bruce Eckela, volně ke stažení. První díl vyšel knižně i v českém jazyce.