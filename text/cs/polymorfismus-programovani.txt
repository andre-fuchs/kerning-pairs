Polymorfismus je vlastnost programovacího jazyka, objektově orientovaného programování (OOP), která umožňuje:
objektům odvozeným z různých tříd volat tutéž metodu se stejným významem v kontextu jejich třídy, často pomocí rozhraní;
přetěžování operátorů neboli provedení rozdílné operace v závislosti na typu operandů, overloading;
jedné funkci dovolit pracovat s argumenty různých typů (parametrický polymorfismus, ne ve všech programovacích jazycích).Rozhodnutí o tom, která metoda bude volána, je u polymorfismu prováděno až za běhu programu (tj. dynamicky pomocí virtuálních funkcí). Tím se odlišuje od přetěžování funkcí, kde je rozhodnutí o volání vhodné funkce provedeno již při překladu (tj. staticky).
Polymorfismus je vlastnost programovacího jazyka, speciálně v objektově orientovaném programování, která umožňuje objektům volání jedné metody se stejným jménem, ale s jinou implementací. V jiném kontextu (než OOP) se tento druh polymorfizmu nazývá podtypový, na rozdíl od parametrického polymorfizmu (ve funkcionálním programování), který odpovídá spíš generice (např. v C#) nebo šabloně v OOP (Java, C++). 
Funkce, metoda nebo makro (a další syntaktické konstrukce) se dají volat s různými datovými typy. Implementace se liší podle druhu polymorfizmu.
(Podtypový) Polymorfismus dělíme na dva typy: statický a dynamický. Při statickém je v době překladu znám konkrétní typ argumentu a proto překladač vygeneruje volání konkrétní (monomorfní) funkce, která pracuje se správným typem. Dynamický p. vybírá volanou funkci za běhu (tzv. pozdní vazba, late binding), v OOP typicky pomocí tabulky virtuálních metod (TVM). Tato tabulka není programátorovi přímo přístupná a generuje ji překladač. V obou případech se kód funkcí generuje při překladu. Tzv. přetížené funkce (overloading) odpovídají statickému polymorfizmu, ale pro každý typ parametru/-ů generují samostatný kód (viz omezený polymorfizmus dále). Dynamický polymorfizmus potřebuje (v nějaké formě) informace o typech za běhu, proto má časovou a/nebo paměťovou režii. Statický polymorfizmus typy za běhu (při dobrém návrhu jazyka a implementace) v principu nepotřebuje, ale ze šablon/generik vygeneruje několik podobných funkcí.
Příklady: objektový polymorfismus (s virtuálními metodami) je dynamický, šablony nebo generika jsou statického typu. Dynamicky typované interpretované jazyky (Ruby, Python) používají také dynamický polymorfizmus.
Polymorfismus může být dvojího druhu: univerzální (parametr typu může být jakýkoliv), omezený (typ jen z určitého výčtu). Např. funkce maximum – nemůže být nad čímkoliv, jen nad datovým typem, který lze porovnat na větší, menší. 
Univerzální typ odpovídá parametrickému polymorfizmu, který lze realizovat jednou funkcí pro všechny typy (za daného omezení). Např. funkce pro délku spojového seznamu nezávisí na typu prvků v seznamu, protože je nevyužívá (a např. prvky jsou schované za pointrem). Omezený polymorfizmus závisí na typu a konkrétní typ si funkce předává jako dodatečný (schovaný) parametr, TVM je realizovaná tímto způsobem.
Pokud si chceme realizovat polymorfizmus (ve formě přetížení) sami, např. při variantních záznamech (union v C), např. pro dvě reprezentace komplexních čísel (pravoúhlou a polární), můžeme ve funkcích využít vnitřně přepínač switch podle tagu reprezentace.
Že je oblast populární a terminologie nejednotná, můžete zjistit porovnáním částí z dědičnosti, přetížení funkce, metoda a 
Příkladem parametrického (operátorového) polymorfismu jsou šablony v C++. Funkce nemá pevně stanovený typ argumentu, dokáže tak přijmout různé typy. Následující funkce násobí parametry i přesto, že nezná jejich typ, lze ji tak volat s různými typy:
Mějme v jazyce PHP rozhraní ITvar definující metodu obsah(), od které je očekáváno, že bude vracet obsah geometrického útvaru. Dále třídy Trojuhelnik a Kruh implementující rozhraní ITvar. Obě třídy implementují metodu obsah() z rozhraní ITvar, ale každá odlišným způsobem. Nakonec definujme funkci vypisInfo(), která bude v parametru očekávat instanci třídy implementující rozhraní ITvar:
PHP interpretuje operátor + jako sčítání (jsou-li operandy čísla) nebo jako sloučení polí (jsou-li operandy pole):
