Die Backus-Naur-Form oder Backus-Normalform (kurz BNF) ist eine kompakte formale Metasprache zur Darstellung kontextfreier Grammatiken (Typ-2-Grammatiken in der Chomsky-Hierarchie). Hierzu zählt die Syntax gängiger höherer Programmiersprachen. Sie wird auch für die Notation von Befehlssätzen und Kommunikationsprotokollen verwendet.
Ursprünglich war sie nach John W. Backus benannt, später wurde sie (auf Anregung von Donald E. Knuth) auch nach Peter Naur benannt. Beide waren Pioniere der Informatik, die sich mit der Erstellung der Algol-60-Regeln und insbesondere mit der Kunst des Compilerbaus beschäftigten. Durch die Backus-Naur-Form im Algol 60 Report wurde es erstmals möglich, die Syntax einer Programmiersprache formal exakt, also ohne die Ungenauigkeiten natürlicher Sprachen, darzustellen.
Es gibt viele Varianten der Backus-Naur-Form. Die erweiterte Backus-Naur-Form (EBNF) ist eine gebräuchliche Variante, die unter anderem eine kompakte Notation von sich wiederholenden Elementen erlaubt. Für Syntaxdefinitionen in Internetnormen wird überwiegend die angereicherte Backus-Naur-Form (ABNF) verwendet.
Ein Programm besteht zunächst aus – auf Bildschirm oder Papier – sichtbaren Zeichen. Daneben treten noch Leerzeichen und Zeilentrenner auf. Die sichtbaren Zeichen werden zu den Terminalsymbolen (englisch terminal symbols / terminals) gerechnet.
Die BNF verwendet sogenannte Ableitungsregeln (Produktionen), in denen Nichtterminalsymbole (englisch nonterminal symbols / nonterminals) definiert werden. Dabei dient das Zeichen | (vertikaler Strich) als Alternative, die Zeichenfolge ::= wird zur Definition verwendet und die Nichtterminalsymbole (auch syntaktische Variablen genannt) werden mit spitzen Klammern <…> umschlossen.
Eine Ziffer außer Null ist also entweder eine 1, oder eine 2, oder eine 3 usw. Es lassen sich auch Terminalfolgen definieren, also eine Sequenz. Als Elemente dürfen Terminalsymbole und Nichtterminalsymbole auftreten.
Eine Ziffer ist also eine 0 oder eine Ziffer außer Null. Eine zweistellige Zahl ist eine Ziffer außer Null gefolgt von einer Ziffer. Zweiundvierzig ist eine 4 gefolgt von einer 2.
Wiederholungen müssen in BNF über Rekursionen definiert werden. Eine Ableitungsregel kann dazu auf der rechten Seite das Symbol auf der linken Seite enthalten, etwa:
Eine Ziffernfolge passt also zu den Symbolfolgen 0, 1, 2, 10, 9870, 8970635 usw., jedoch auch zu 00, 000, … Eine positive Zahl darf nicht mit 0 beginnen. Dies leistet die folgende Regel:
Die Produktionsregeln der BNF (nach Backus) sind genau die in kontextfreien Grammatiken (nach Chomsky) erlaubten Regeln; es ist also klar, dass beide Formalismen dieselben Sprachen erzeugen. Sie entstanden auch zu derselben Zeit, nämlich am Ende der 1950er Jahre. Es gibt aber erst seit 1961 einen Hinweis auf den Zusammenhang, nämlich in einem Überblicksartikel über Metasprachen von Saul Gorn, dort noch als Zusammenhang von BNF mit allgemeinen Phrasenstrukturgrammatiken dargestellt und erst später – genauer – auf kontextfreie Grammatiken beschränkt. Im Folgejahr gab es einen Briefwechsel zwischen Gorn und Knuth über dieses Thema in den Leserbriefen (letters to the editor) von Comm. ACM. Es ist plausibel anzunehmen, dass Chomsky und Backus ihre Formalismen unabhängig voneinander entwickelten und Gorn der erste war, der beide Ansätze kannte und so die Verbindung herstellen konnte.
Um die Syntax von Programmiersprachen wie ALGOL, Pascal oder Java in BNF darzustellen, müssen auch die Schlüsselwörter (IF, SWITCH) zu den Terminalsymbolen gerechnet werden. In einem Compiler werden sie in einer Vorphase, der lexikalischen Analyse, erkannt und als besondere Zeichen weitergegeben. Kommentare werden von der lexikalischen Analyse erkannt (und oft entfernt), manchmal auch weitere Elemente wie Gleitkommazahlen, Bezeichner und Zeichenketten.
Damit lässt sich die gesamte Syntax z. B. eines PASCAL-Programms in BNF darstellen (teilweise gekürzt):
Eine Syntaxanalyse besteht aus der Rückführung eines Programmtexts auf das Nichtterminalsymbol <Programm>.
Ein Programm muss also mit dem Wort PROGRAM beginnen, auf das ein Bezeichner folgt. Bezeichner beginnen mit einem Buchstaben, gefolgt von beliebig vielen Buchstaben oder Ziffern.
Eine Postanschrift besteht aus einem Personenteil, gefolgt von einer Straße, gefolgt von der Stadt.
Der Namensteil besteht aus einem Vornamensteil, einem Nachnamen oder aus einem Vornamensteil und wiederum aus einem Namensteil. (Diese Regel zeigt die Benutzung von Rekursion in BNFs und stellt den Fall dar, dass eine Person mehrere Vornamen und/oder Initialen besitzt.)
Eine Straße besteht aus einem Straßenname, gefolgt von einer Hausnummer, gefolgt von einem Zeilenende.
Eine Stadt besteht aus einer Postleitzahl, gefolgt von einem Stadtname, gefolgt von einem Zeilenende.Man beachte, dass einiges (wie die Postleitzahl oder Hausnummer) nicht weiter spezifiziert ist. Es wird angenommen, dass diese lexikalischen Details vom Kontext abhängen oder anderweitig spezifiziert sind.
Oft wird der Titel in eckige Klammern gestellt, der Titelteil entfällt. Dies bedeutet, dass der Titel leer sein darf:
Dieses Beispiel ist keine reine Form aus dem Algol 60 Report. Die eckigen Klammern […] stellen eine Option dar. Sie wurden einige Jahre später in der Definition von IBMs PL/I eingeführt, sind aber allgemein nur in EBNF anerkannt.
Die Alternative und die Sequenz sind zur Darstellung der BNF grundsätzlich geeignet. Allerdings lassen sich die Zeichen |, [, ] nicht von den BNF-Zeichen unterscheiden. Oft können auch Zeichen wie Punkt oder Minus nur schwer erkannt werden.
Die Option wird manchmal nicht mit eckigen Klammern, sondern durch ein angefügtes Fragezeichen dargestellt. Die Wiederholung durch Rekursion ist oft umständlich:
Optionale Wiederholungen (keinmal, ein- oder mehrfach) werden durch einen angefügten Stern dargestellt.
Die erweiterte Backus-Naur-Form geht andere Wege. Sie verwendet eckige Klammern […] für die Option, jedoch geschweifte Klammern {…} für die optionale Wiederholung. Terminale und Nichtterminale werden nicht streng unterschieden. Hier würde das obenstehende Beispiel so dargestellt:
Bei dieser Version werden Schlüsselwörter als Großbuchstaben dargestellt, Nichtterminale als Kleinbuchstaben. Wiederholungen müssen über Rekursionen definiert werden. Davon wird in der eigenen Definition auch Gebrauch gemacht (modifiziertebnf, elementliste, nichtterminal, schlüsselwort).
Manche Parsergeneratoren verwenden eine eigene Form der BNF als Eingabe und generieren hieraus einen Parser für die zugrundeliegende Programmiersprache.
Das dem Betriebssystem Unix beigegebene yacc ist so ein Programm. Es generiert einen tabellengesteuerten Parser aus einer BNF-Definition, wobei nur Produktionen (: statt ::=) und Alternativen (|) zulässig sind. Dies ist notwendig, da yacc eine S-Attribution ermöglicht, einem optionalen Teil jedoch kein sinnvoller semantischer Typ des Attributs zugeordnet werden kann. Als Ausgabe erhält man ein Unterprogramm in der Programmiersprache C. Die zugrundeliegende Grammatik muss dabei die LALR-Eigenschaft erfüllen.
Donald E. Knuth: Backus Normal Form vs. Backus Naur Form. In: Communications of the ACM. Band 7, Nr. 12, 1964, S. 735–737, doi:10.1145/355588.365140.
