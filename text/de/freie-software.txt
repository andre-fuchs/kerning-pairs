Freie Software (freiheitsgewährende Software, englisch free software oder auch libre software) bezeichnet Software, welche die Freiheit von Computernutzern in den Mittelpunkt stellt. Freie Software wird dadurch definiert, dass ein Nutzer mit dem Empfang der Software die Nutzungsrechte mitempfängt und diese ihm nicht vorenthalten oder beschränkt werden.Insbesondere bedeutet es,
die Freiheit der Kontrolle über die Software (und zwar uneingeschränkte Freiheit der Kontrolle und Unabhängigkeit durch Erhalt des genauen Quellcodes, um Analysen und Änderungen der Software zu erlauben),
die soziale Freiheit der Kollaboration, um aktiv mit beliebigen anderen Nutzern und Entwicklern kooperieren zu können (die Software darf kopiert und weitergegeben werden, im Original oder mit Veränderung).Man darf hinsichtlich der Software wahlweise kommerzielle Tätigkeiten anbieten (Softwareanpassungen, Wartungsverträge, Support, Service- und Garantieleistungen usw.). Gewünschte Analyse und Änderungen (siehe Freiheit der Kontrolle) darf wegen gewährter Kollaboration von jedem – auch unabhängigen Dritten seiner eigenen Wahl – durchgeführt werden.
Durch diese Freiheitsrechte wird es dem Nutzer erlaubt, Eigenkontrolle und Privatsphäre über die Software und die eigene Datenverarbeitung zu haben oder Teil einer (öffentlichen oder eigenen) Gruppe von Nutzern (Gemeinschaft) zu werden, welche die Software kontrollieren (Kollaboration ist möglich) und für sich nutzen.
Dies steht im Gegensatz zu proprietärer Software (freiheitsentziehender Software), bei der die Entwickler und Distributoren der Software den Endnutzern die genannten Freiheitsrechte explizit entziehen, beispielsweise durch absichtliche Nicht-Auslieferung von Quelltext oder Verbote und Einschränkungen per Vertragsregelungen oder Geheimhaltungsvertrag.
Die 1985 von Richard Stallman gegründete Free Software Foundation (FSF) definiert Software als Freie Software, wenn dem Empfänger per Lizenz folgende Freiheiten eingeräumt werden:
„Freiheit 1“: Die Freiheit, die Funktionsweise des Programms zu untersuchen und eigenen Bedürfnissen der Datenverarbeitung anzupassen.*
„Freiheit 2“: Die Freiheit, das Programm weiterzuverbreiten und damit seinen Mitmenschen zu helfen.
„Freiheit 3“: Die Freiheit, das Programm zu verbessern und diese Verbesserungen der Öffentlichkeit freizugeben, damit die gesamte Gemeinschaft davon profitiert.** Für die Freiheiten 1 und 3 ist der Zugang zum Quelltext Voraussetzung, da sonst das Verändern eines Programms schwierig bis unmöglich ist.
Die Freie-Software-Bewegung ist aus der Hacker-Gemeinschaft hervorgegangen. Deren Freiheitsvision manifestiert sich in dem seit September 1983 existierenden GNU-Projekt, der Freien-Software und der 15 Jahre später entstandenen Open-Source-Bewegung. Ein Merkmal eines Hackers ist nicht die Aktivität selbst, sondern die Art wie sie durchgeführt wird. Jemand der beispielsweise für ein Freie-Software-Projekt entwickelt, ist nicht automatisch ein Hacker, aber die Hackergemeinschaft ist eng verknüpft mit diesen Bewegungen. Innerhalb der frühen Hackergemeinschaft der 1960er- und 1970er-Jahre war es an akademischen US-Einrichtungen wie MIT, Stanford, Berkeley und Carnegie Mellon, selbstverständlich, Quellcodes offenzulegen und eigene Softwareverbesserungen mit anderen Programmierern zu teilen. Software wurde damals als Beigabe zu der (teuren) Hardware betrachtet. Ende der 1970er und Anfang der 1980er Jahre fingen IT-Unternehmen an, Software zu kommerzialisieren und den Quelltext geheimzuhalten. Richard Stallman ist ein prominenter Hacker, der wesentliche Beiträge zum Selbstverständnis der akademischen Hackerkultur geleistet hat, unter anderem indem er dieser Entwicklung etwas entgegenstellte.Bis in die 1980er Jahre gab es Freie Software als Public domain Software. Daneben wurde Software frei als gedruckter Quelltext in Computermagazinen und Büchern verbreitet. Die Hackergemeinschaft und das intellektuelle Klima rund um den „AI“-Rechner des MIT inspirierten Richard Stallman maßgeblich zur Schaffung des GNU-Projekts. Das hatte zunächst die Erstellung eines freien Betriebssystems zum Ziel. 1985 folgte die Gründung der FSF, einer Stiftung zur Förderung derartiger Projekte, die im Februar 1986 die erste Definition der Freien Software veröffentlichte. Wobei „frei“ die Freiheiten für die Gesellschaft meint, die ein derart lizenziertes Produkt bietet.
Für weitere Informationen dazu siehe die Abschnitte „Entwicklungen im Vorfeld“ und „Die Entstehung Freier Software“.
Das englische Wort free hat zwei unterschiedliche Bedeutungen und steht in dem seit 1982 gebräuchlichen Begriff Freeware für „kostenfrei“ (genauer für „kostenlose Software“); in Freie Software (englisch Free Software) steht es für „Freiheit“ (genauer für „freiheitsgewährende Software“). Englischsprachige Aktivisten machen die Unterscheidung mit free as in free beer („frei wie Freibier“) und Free as in Freedom („frei wie in Freiheit“) deutlich.
Freeware räumt dem Benutzer nicht die von der Free Software Foundation aufgelisteten Freiheiten ein, sondern die der individuellen Lizenzvereinbarung mit dem Urheber. Daher gilt sie als „unfreie“ Software.
Der Begriff Open Source (zu deutsch „quelloffen“) wurde 1998 von den Gründern der Open Source Initiative (OSI) eingeführt: Eric S. Raymond, Bruce Perens und Tim O’Reilly. Sie wollten den pragmatischeren Ansatz derartiger Software in den Mittelpunkt stellen, statt auf eine (aus ihrer Sicht) möglicherweise abschreckend wirkende, moralisch aufgeladene und polarisierende Freie-Software-Idee zu setzen. Quelloffene Software wird von ihnen als vorteilhaftes Entwicklungsmodell beschrieben, wobei die Frage, ob Software quelloffen sein sollte, dort eine rein praktische und keine ethische Frage ist.
Mit der Betonung der Überlegenheit des Entwicklungsprozesses gibt die OSI eher die Sichtweise der Entwickler wieder, während die FSF auf die Sicht der Anwender fokussiert. Die FSF begreift unfreie Software als gesellschaftliches Problem. In ihren Augen ist die Entscheidung für oder gegen Freie Software deshalb primär eine ethische und soziale Entscheidung; der praktische Nutzen ist sekundär. Da in der Darstellung der OSI die Freiheit, die Freie Software den Benutzern gibt, nicht erwähnt wird, wirft die FSF der OSI eine Ablenkung von den wesentlichen Punkten vor.Diese zwei unterschiedlichen Bewegungen mit unterschiedlichen Sichtweisen verbindet die gemeinsame Wertschätzung für quelloffenen Code und das Ziel des Aufbaus eines freien Softwareökosystems, was in zahlreichen Projekten mündet, in denen sie zusammenarbeiten. Alternative Kompromissbezeichnungen wie "Free and open source software" (FOSS) oder „Free/Libre Open Source Software“ (FLOSS), die von Anhängern beider Positionen akzeptiert werden, sollen die Gemeinsamkeiten betonen.
Wegen Bedenken bezüglich kommerzieller Ausnutzung oder amoralischem Gebrauch der eigenen Software gab und gibt es Bestrebungen, nicht alle Freiheiten aus der Definition freier Software in ihrer Lizenz uneingeschränkt zu gewähren. Werden die von der FSF aufgelisteten Freiheiten um die kommerzielle Weiterverbreitung vermindert (aber die sonstigen unverändert beibehalten), wurde dies von der FSF bis 2011 ablehnend als halbfreie Software (englisch semi-free software) bezeichnet.
Seit 2012 nimmt die FSF diese Unterscheidung nicht mehr vor und zählt Software mit derart angepassten Lizenzen zur „unfreien“ Software.
Sind eine oder mehrere Bedingungen der von der FSF aufgelisteten Freiheiten nicht erfüllt, wird die Software als proprietär oder „unfrei“ (im Sinne fehlender Freiheiten) bezeichnet.
Freie Hardware (englisch free hardware, auch bezeichnet als open hardware oder open source hardware) steht der Freie-Software- und Open-Source-Bewegung nahe bzw. geht auf diese zurück. Dabei handelt es sich um Hardware, die nach freien Bauplänen hergestellt wird.
Die auf Februar 1986 datierte früheste bekannte Veröffentlichung der Definition stammt von der (jetzt nicht mehr weitergeführten) „GNU's Bulletin Publication“ der FSF. Die Quelle für dieses Dokument ist im Philosophieabschnitt der Webseite des GNU-Projekts zu finden. Die Definition bezog sich zunächst auf zwei Punkte:
First the freedom to copy a program and redistribute it to your neighbors, so that they can use it as well as you.
Second, the freedom to change a program, so that you can control it instead of it controlling you; for this, the source code must be made available to you.”Zu deutsch: „Das Wort ‚free‘ in unserem Namen bezieht sich nicht auf den Preis; es bezieht sich auf Freiheit.
Erstens, die Freiheit, ein Programm zu kopieren und an eure Nachbarn weiterzugeben, so dass sie das Programm ebenso wie ihr nutzen können.
Zweitens, die Freiheit, ein Programm abzuändern, so dass ihr das Programm beherrscht und nicht das Programm euch; zu diesem Zwecke muss euch der Quelltext verfügbar gemacht sein.“
– FSF, 1986Im Jahr 1996 wurde Freie Software auf der Webseite gnu.org definiert, indem man sich auf die „drei Ebenen von Freiheit“ bezog und explizit noch hinzufügte, dass man auch die Freiheit haben müsse, die Software studieren zu können. Das kann auch in der älteren Zweipunktedefinition als Teil der Freiheit, das Programm verändern zu können, herausgelesen werden, ist dort aber nicht so deutlich hervorgehoben. Später mied Stallman das Wort „Ebene“, weil man alle Freiheiten brauche und das Wort dafür etwas irreführend sei.
Schlussendlich wurde noch eine Freiheit hinzugefügt, die explizit sagt, dass Nutzer die Möglichkeit haben sollten, das Programm auszuführen, wie er möchte, für jeden Zweck. Die bestehenden Freiheiten wurden bereits von eins bis drei nummeriert, aber diese Freiheit sollte vor den anderen kommen; darum wurde sie ergänzt als „Freiheit 0“.Die moderne Definition definiert Freie Software durch die bereits weiter oben aufgeführten vier Freiheiten. Zusammengefasst definiert sie Freie Software als Software, die Endnutzern die Freiheiten der Nutzung, des Überprüfens/Studierens, des Teilens und des Modifizierens der Software gewährleistet.
Seit April 2008 wird die Definition in 39 Sprachen auf der FSF Webseite veröffentlicht. Ebenfalls veröffentlicht die FSF auf ihrer Webseite eine Liste von Lizenzen, die den Anforderungen an diese Definition gerecht werden.
Die Unterschiede zur Freien Software wurden bereits weiter oben im Abschnitt zur Abgrenzung zur Open-Source-Software verdeutlicht. Demgegenüber gibt es auch viele Gemeinsamkeiten. So wurde beispielsweise die „Debian Free Software Guidelines“ von der Open Source Initiative (OSI) unter dem Namen „Open Source Definition“ verwendet; die einzige Änderung ist die Ersetzung des Begriffs „Freie Software“ durch „Open Source Software“. Die FSF kommentierte dazu folgendes:
Zitat: „Der Begriff Open-Source-Software wird von einigen benutzt, um mehr oder weniger die gleiche Kategorie wie Freie Software zu meinen. Es ist nicht genau die gleiche Softwarekategorie: einige Lizenzen wurden [von der OSI] akzeptiert, die wir als zu restriktiv betrachten, und es gibt Freie Software-Lizenzen, die [von der OSI] nicht akzeptiert wurden. Jedoch sind die Unterschiede in der Erweiterung der Kategorie klein:
sämtliche Freie Software ist öffentlich zugänglicher Quellcode und sämtliche Open-Source-Software ist beinahe frei.“
Die genannten Ziele von Freier Software, die Freiheit in der Kontrolle der eigenen Datenverarbeitung und die Kooperation, werden durch die Gewährung folgender Rechte erreicht: die Nutzer dürfen Freie Software ausführen, kopieren, verbreiten, untersuchen, ändern und verbessern; diese Freiheiten werden gewährt und nicht (wie bei proprietärer Software) entzogen. Entscheidend ist daher nicht die Vermeidung von Kosten, sondern die Freiheiten der Endnutzer. So wird das Kontrollrecht über die Software dadurch garantiert, dass ein Nutzer von Freier Software immer den dazugehörigen Quellcode zur Verfügung hat oder diesen zumindest nachträglich beziehen kann (was untersuchen und modifizieren ermöglicht),- und dadurch, dass ein Nutzer durch gewährte Kooperation dies wahlweise von Anderen durchführen lassen kann.
Freie Software ist an ihrer Lizenz erkennbar. Dazu gehört die GNU General Public License und andere freie Softwarelizenzen. Ein soziales und ethisches Grundprinzip hinter den verfochtenen Rechten an und mit Freier Software ist, dass ihre Entwickler die Freiheit sowie die Gemeinschaft der Endnutzer schätzen und respektieren, weil die Nutzungsbedingungen von Freier Software es Anwendern wie Entwicklern gleichermaßen ermöglichen, ein Umfeld der Unabhängigkeit, Gemeinschaft, Zusammenarbeit, Ethik, Solidarität und des Austauschs zu schaffen und zu gestalten.Der Begriff „Freie Software“ und dessen genaue Definition sowie die Unterscheidung zu proprietärer Software so wie der spezifische Freiheitsgedanke gehen entscheidend zurück auf den Beginn des GNU-Projekts um Programmierer-Aktivisten wie Richard Stallman und die damit verbundene Gründung der Free Software Foundation (FSF) im Jahr 1985.
Die in Bezug auf Anspruch und Zielsetzungen zwar eng verwandte, der Wahl ihrer Mittel und Wege dorthin nach nicht identische und eigenständige Open-Source-Bewegung entstand erst später (1998) und in einem anderen personellen Umfeld. Der Unterschied zwischen den Ansätzen Freie Software und Open Source liegt vor allem in der jeweiligen Gewichtung prinzipiell gemeinsam vertretener Werte: Im Sinne von Open Source liegt das Hauptaugenmerk beim praktischen Nutzen und den Entwicklungsmethoden, während der Fokus der Freien-Software-Gemeinschaft auf den ethischen, sozialen und politischen Implikationen liegt.Zu den Nutzern Freier Software gehören Privatnutzer, Unternehmen und öffentliche Einrichtungen, wie Regierungen (vor allem auf Grund der Unabhängigkeit, Freiheit und Kontrolle der eigenen Datenverarbeitung), Forschungszentren (CERN), Universitäten, der New York Stock Exchange, Wikipedia, das Verteidigungsministerium der Vereinigten Staaten.Der Fokus von Freier Software ist also die Freiheit des Anwenders zu teilen, zu kopieren und zu modifizieren und steht den üblichen Beschränkungen proprietärer Software („unfreie Software“ – im Sinne fehlender Freiheiten) entgegen: Bei proprietärer Software versuchen Entwickler, die Endnutzer und den Endverbraucher-Markt zu kontrollieren und zu monopolisieren (etwa durch restriktive Endbenutzer-Lizenzverträge, Geheimhaltungsverträge, Produktaktivierungen, Dongles, Kopiersperren, proprietäre Formate oder den Vertrieb von binären ausführbaren Programmen ohne Quelltexte) und zwingen die Nutzer somit in die Abhängigkeit vom jeweiligen Entwickler-Unternehmen. Freie Software hingegen unterscheidet sich durch die gewährte Freiheit: Verwendung, Teilen, Modifizieren.
Das Selbstverständnis der gewährten Freiheiten ist es, dass diese als notwendig für die Förderung des sozialen und ethischen Anliegens gesehen werden, welches die Freiheit und Gemeinschaft der Nutzer respektiert und wertschätzt (im Bereich von Computer-Nutzung und Datenverarbeitung), indem Freie Software aktiv Zusammenarbeit und Kooperation ermöglicht: Nutzer haben so die Möglichkeit, im Gebrauch ihrer Computer und Datenverarbeitung eine Gemeinschaft von Wohlwollen und ethischer Aufrichtigkeit gründen zu können. Freie Software kann für jeden Zweck verwendet werden (ohne Notwendigkeit einer Bindung an bestimmte soziale oder ethische Werte), aber die FSF und das GNU-Projekt fördern aktiv die Werte der Freiheit, Gemeinschaft, Zusammenarbeit und ethische Solidarität welche Freie Software ermöglicht.Freie Software hat durch ihre Grundsätze einen starken Fokus auf Zusammenarbeit und Zusammenhelfen in einer Gemeinschaft: An öffentlich geführten Freie-Software-Projekten kann sich jeder beteiligen. Dies schließt den kommerziellen und gewerblichen Nutzen nicht aus, da diese Freiheit nicht eingeschränkt wird. Das Wort frei im Begriff Freie Software bezieht sich auf Freiheit und nicht auf kostenlos; Freie Software hat nichts mit monetären Kosten oder Geld zu tun. Freie Software ist in der Regel kostenlos, aber unterliegt keiner solchen Einschränkung. Eine freie Software darf kommerziell verwendet, zu jedem Preis verkauft oder weitervertrieben werden und ist dennoch Freie Software, solange die Freiheitsrechte sichergestellt bleiben. Dafür erlaubt die am häufigsten verwendete GPL jedoch nicht, eine GPL-Software kompiliert zu verkaufen und für die Quelltext-Bereitstellung einen gesonderten hohen Preis zu verlangen (über einer geringen Erstellungsgebühren, z. B. Medium), was Kommerzialisierungsoptionen von GPL-Software in der Praxis einschränken kann.Die Freiheiten im Umgang mit Freier Software sind durch Freie-Software-Lizenzen rechtlich verankert und können somit garantiert werden. Zu solchen Lizenzen gehören die GNU General Public License (GPL), welche durch das Copyleft-Prinzip besagt, dass Nutzern von bearbeiteten und wiederveröffentlichten Versionen der Software die gleichen Freiheiten gegeben werden müssen. Aber auch freizügige Lizenzen wie die BSD-Lizenz (die kein Copyleft erfordern) werden als Freie-Software-Lizenzen akzeptiert.
Im Gegensatz zu proprietärer Software, bei der sich ein Code zum unbemerkten Ausspionieren/Überwachen, zur eingeschränkten Nutzung von Medien durch Digitale Beschränkungsverwaltung sowie Hintertüren für unbemerktes ferngesteuertes Einschleusen von Änderungen (ungewollte, unbemerkte „Updates“) befinden kann, bietet Freie Software durch ihre Untersuchbarkeit eine Software, aus der jegliche unerwünschten und schädlichen Eigenschaften entfernt werden können und daher meist von vornherein nicht vorhanden sind.
Bei Freier Software geht es darum, dass Nutzer Freiheiten für die empfangene Software erhalten: in erster Linie den Quelltext (um Änderungen machen zu können).
Software kann einfach geändert oder vervielfältigt werden (im Gegensatz zu materiellen Objekten). Softwarenutzer sollen davon Gebrauch machen können, nicht nur die ursprünglichen Entwickler.
Kochrezepte werden manchmal als Analogie für Freie Software verwendet: Ein Kochrezept ist dann freiheitsgewährend, wenn ein Empfänger es weitergeben darf (mit oder ohne Änderungen).Dies bedeutet nicht, dass Anhänger der Freien-Software-Bewegung beim Restaurantbesuch das Rezept einer bestellten Speise verlangen, oder auf der Offenlegung des Rezeptes bestehen. Der Grund ist, dass die Speise das Ergebnis (englisch Output) des Kochens ist, nicht eine Variante des Rezepts. (Beim Restaurantbesuch wird eine Speise bestellt, nicht die "Schritte, die zur Speise führen"). In selber Weise bestehen Anhänger der Freien-Software-Bewegung beim Empfang eines Dokuments nicht auf Offenlegung der Software, die zum Erstellen des Dokuments genutzt wurde. Allerdings werden Mitglieder der Freien-Software-Bewegung Daten-Formate ablehnen, die sie zwingen würden, ein proprietäres Programm zum Lesen/Verwenden (oder Abändern) eines Dokuments zu nutzen.Wenn ein Nutzer Software empfängt, so ist das ausführbare Programm eine direkte Transformation des Quelltextes: Die Schritte im Programm, sind eine direkte Transformation (oder Variante) der Schritte/Beschreibungen im Quelltext. In freiheitsgewährenden Softwarelizenzen, wie der GNU GPL wird dies als "Corresponding Source" bezeichnet: korrespondierender Quelltext. Wenn Software als Freie Software weitergegeben wird, so muss ein Empfänger das Recht erhalten, den korrespondierenden Quelltext bekommen zu können (meist wird dieser sofort mit ausgeliefert), da somit das Recht gewährt wird, die Freiheit zu haben, die Software in adäquater Weise ändern zu können. Ohne den Quelltext (z. B. nur als binäres ausführbares Programm) ist es oft fast unmöglich, sinnvoll Änderungen an der Software vorzunehmen. Dies begründet sich meist durch den für menschliche Leser sehr fremden Maschinen-Code, zu dem der Quelltext bei vielen Programmiersprachen kompiliert wird, um dann auf einem Computer lauffähig zu werden. Diese schwer zu ändernde Form der Software (Maschinen-Code) ist nicht ein Neu-Produkt oder ein etwaig durch Ressourcen-Knappheit schwierig zu erstellendes Artefakt, wenn von dem Quelltext ausgegangen wird. Stattdessen ist es eine komfortable direkte Transformation des Quelltextes. Die Freie-Software-Bewegung plädiert für den Mitempfang des Quelltextes, da nur so der Aspekt der Analyse, Änderbarkeit und Kontrolle ausreichend möglich ist.
Mitglieder der Freie-Software-Gemeinschaft achten bei der Auswahl von Software-Paketen auf die Gewährung von Freiheiten, aus Gründen ihrer eigenen Freiheit. Sie weigern sich zwar oft, proprietäre Software zu nutzen. Sie weigern sich nicht beispielsweise „U-Bahnen zu nutzen wenn diese Computer mit Windows haben, oder zu telefonieren wenn der Anruf durch Verteiler geleitet wird, welche proprietäre Software nutzen, oder Internetverbindungen aufzubauen, wenn diese durch Router geleitet werden, welche proprietäre Software ausführen, oder T-Shirts zu bestellen weil die Hersteller Windows nutzen könnte um T-Shirts herzustellen.“ Es geht Mitgliedern der Freie-Software-Gemeinschaft primär um die Freiheit in der eigenen Datenverarbeitung. Manche (so die FSF oder FSFE) engagieren sich in Öffentlichkeitsarbeit, um anderen Menschen die entsprechenden Aspekte der Freiheit in der Datenverarbeitung näher zu bringen.
Freiheitsgewährende Software (Freie Software) sagt nichts über die Verfügbarkeit der Software aus: Manche wird als öffentliches Projekt entwickelt (und ist somit jedem verfügbar), andere wird in kundenspezifischem Entwicklungs-Auftrag speziell für Unternehmen, Organisationen, Regierungen oder sogar einzelnen Nutzer entwickelt (und ist somit nur denen verfügbar, außer sie nutzen ihr Recht auf Weitergabe). Jedoch haben alle Empfänger mit dem Empfang der Software die Freiheitsrechte von Freier Software empfangen.
Software, die von einer Vielzahl von Nutzern brauchbar ist (Programme für Textverarbeitung, Webbrowsing), wird bei freiheitsgewährender Software meist in öffentlichen Projekten entwickelt. Diese Programme sind Freie Software, die öffentlich verfügbar ist. Durch die Rechte Freier Software dürfen Nutzer Änderungen an dieser Software vornehmen, oder diese Änderungen verbreiten, ohne die ursprünglichen Entwickler davon benachrichtigen zu müssen. Allerdings werden die Änderungen/Verbesserungen meist dem ursprünglichen Projekt zur Verfügung gestellt. Dadurch können die Verbesserungen ein fixer Teil der öffentliche Software werden (müssen also in dem Fall nicht immer selber dazugefügt werden, da etwaige Beiträge dann von der Community weitergewartet werden. Dies bedingt aber zuerst, dass sich die Koordinatoren des öffentlichen Projekts dafür entschieden haben, die spezifischen Verbesserungen bzw. Änderungen aufzunehmen und einzupflegen); außerdem kommen Verbesserungen der Allgemeinheit zugute, in dem sich die Software durch unterschiedlich Beiträge verbessern kann. Da es bei öffentlichen Projekten Meinungsverschiedenheiten geben kann (oft auf rein technischer Ebene, wo unterschiedliche technische Ziele verfolgt werden können), kommt es dazu, dass ein öffentliches Projekt abgezweigt (ge-"forked") wird und es fortan in zwei oder mehr unterschiedlichen separaten Varianten öffentlich zur Verfügung steht. Dies basiert auf dem Recht, das Freie Software änderbar ist (und die geänderte Version wiederveröffentlichbar ist).
Freiheitsgewährende Software, die einem Empfänger erlauben, die Freiheiten bei darauffolgender Weitergabe wieder zu entziehen, wird freizügige Software genannt. Freiheitsgewährende Software, die sicherstellt dass empfangene Freiheiten bei Weitergabe der Software weitergegeben werden müssen, wird Copyleft Software genannt. Beides gilt als Freie Software (Copyleft sichert Freiheiten für jeden, in dem die Freiheiten bei Weitergabe nicht wieder entzogen werden dürfen, wie es bei freizügiger Software der Fall ist.)
Programmierer, die substantielle Software der Öffentlichkeit als Freie Software zur Verfügung stellen, wählen (als Urheber) oft eine Freiheitsgewährende Software-Lizenz mit Copyleft, da sie somit verhindern können, dass die Software von Unternehmen aufgegriffen wird und Teile daraus zu proprietärer Software verarbeitet wird, welche Nutzern wieder Freiheitsrechte entziehen würde. Andere wählen ein Dual-License Konzept aus, wo die Software der Öffentlichkeit z. B. als Copyleft zur Verfügung steht, aber die Software gegen Bezahlung zu anderen Bedingungen erhältlich ist. Manche veröffentlichen Programme unter freizügigen Lizenzen (also ohne Copyleft); vor allem dann, wenn das Ziel verfolgt wird, ein Programm so breitflächig wie möglich (selbst für proprietäre Softwareentwickler) nutzbar zu machen (wenn es darum geht ein neues Protokoll oder eine neue Bibliothek zu fördern).
Freie Software darf kommerzielle Software sein (kommerziell und proprietär sind nicht das gleiche). Freie Software darf kommerziell verkauft und weitergegeben und kommerzielle Tätigkeiten (z. B. Support) dürfen angeboten werden. Natürlich darf dies auch gratis geschehen, dann meist mit Verzicht auf Gewährleistung. Freie Software ist aber nie proprietär, indem sie Nutzern die Freiheiten auf Modifizierung und Weitervertrieb verbietet oder unmöglich macht.Private oder kundenspezifische Software, welche für einen bestimmten Benutzer (normalerweise eine Organisation) entwickelt wurde (normalerweise gegen Bezahlung), und nicht öffentlich verfügbar ist, kann Freie Software sein. Dies ist der Fall, wenn der alleinige Benutzer der Software (der einzige Empfänger der Software), dennoch die vier Freiheiten erhalten hat.Die Freie-Software-Bewegung lehnt die These ab, dass Programmierer berechtigt seien, Nutzern Freiheiten zu entziehen, um Gewinn zu erzielen. Stattdessen wertet die Freie-Software-Bewegung das Recht auf Freiheit der Nutzer höher als einen finanziellen Gewinn von Programmierern oder Software-Unternehmen, wenn dieser auf Kosten der Freiheit anderer (Eigenkontrolle und/oder Gemeinschaft, oder Privatsphäre) basiert. Deswegen erlaubt die am häufigsten verwendete GPL zwar die Kommerzialisierung, erlaubt jedoch nicht für den Quelltext mehr zu verlangen als für das kompilierte Programm (ausgenommen zusätzlicher Bereitstellungsgebühren z. B. für das Medium), was die Kommerzialisierung von GPL Software erschweren kann.Die Freie-Software-Bewegung ist aber durchaus für eine Bezahlung von Programmierern, wenn diese die Freiheit der Nutzer achten, sowie für alle Geschäftsmöglichkeiten rund um Freie Software (Support, Wartung, Betreuung). Richard Stallman schildert mögliche Szenarien einer Softwaresteuer, mit der eine Regierung Geld für die Entwicklung von allgemeinnütziger Software (die zusätzlich Freiheiten gewährt) zur Verfügung stellen könnte.
Einige Menschen sehen in der Freie-Software-Bewegung Ansätze, die Möglichkeiten zur Überwindung des Kapitalismus zu zeigen. In Deutschland beschäftigt sich unter anderem das Projekt Oekonux mit dieser Thematik. Andere sehen in freier Software lediglich einen weiteren Wettbewerber innerhalb der marktwirtschaftlichen Ordnung. Die Freiheit, die Software in andere Sprachen zu übersetzen, kommt besonders denjenigen Sprachgruppen zugute, für die eine Übersetzung bisher kommerziell nicht interessant war.
Die Freiheit der Software wird vom UNO-Weltgipfel zur Informationsgesellschaft (WSIS) als schützenswert anerkannt. Sie gehört zu den elementaren Forderungen der Zivilgesellschaft, mit der die „Digitale Kluft“ überwunden werden soll. Unter „digitaler Kluft“ wird die Spaltung in Regionen der Erde bezeichnet, die sich die Schaffung von IT-Infrastruktur und damit vor allem die Teilnahme am Internet leisten können, und solchen, die dies nicht können. Anders als bei proprietärer Software fließt bei der Verwendung freier Software kein Geld in fremde Länder ab, wo die Anbieter proprietärer Software ihren Unternehmenshauptsitz haben. Alle Mittel, die vor Ort für die IT bereitstehen, können daher unmittelbar in die IT-Wirtschaft vor Ort einfließen.
1931 gründete Thomas J. Watson Sr. von IBM ein Methods Research Department um das Wissen zum Betrieb seiner Datenverarbeitungsverfahren zu sammeln und effektiv mit seinen Kunden zu teilen, was IBM mit den Nutzergruppen SHARE (Society to Help Avoid Redundant Effort) und GUIDE für seine Mainframe-Programmierung fortführte. Bis 1970 wurde Software von IBM kostenlos und inklusive Quellcode zur Verfügung gestellt. Zwischen 1960 und 1970 etablierte sich unter anderem an akademischen US-Einrichtungen (Stanford, Berkeley, Carnegie Mellon und MIT) eine „Hacker-Kultur“, für die es selbstverständlich war, eigene Software-Verbesserungen mit anderen Programmierern zu teilen. Programmierer tauschten die Software frei untereinander aus und gaben häufig den entsprechenden Quelltext weiter. Insbesondere in großen Benutzergruppen wie der DEC User Group (DECUS) war dies üblich. Es war gängige Praxis, den Quelltext der mit Computersystemen ausgelieferten Software mitzuliefern. Dadurch kamen viele Vorschläge für Verbesserungen und Fehlerkorrekturen zu den Computerherstellern zurück. Software wurde als Zugabe zu Computern gesehen, um diese nutzbar zu machen.
Am 23. Juni 1969 kündigte IBM neue Regeln für die Nutzung und Wartung seiner Software, getrennt von den Hardware-Nutzungsbedingungen an. Für Software wurde urheberrechtlicher Schutz in Verbindung mit Lizenzverträgen eingeführt. Die bislange freie Dienstleistung zur Wartung und Weiterentwicklung von Software wurde gesondert berechnet, was einen eigenen Wirtschaftsmarkt für diesen Dienstleistungssektor begründete. In den späten 1970er-Jahren begannen gleichfalls andere Unternehmen, „Softwarelizenzen“ einzuführen, welche den Nutzen, die Weitergabe und die Möglichkeit der Veränderung der Programme einschränkte. Außerdem wurden viele Programme nicht mehr im Quelltext geliefert, sondern nur noch in maschinenlesbarer Form, zum Schutz der Software als Geschäftsgeheimnis, was eine Veränderung nahezu unmöglich machte. Zusätzlich wurde es mit dem Aufkommen von finanzierbaren Mikrocomputern von IBM, Apple, Atari oder Commodore üblich, Software getrennt von Computer-Hardware zu verkaufen und den Quelltext vor der Konkurrenz zu verbergen, die Software wurde somit proprietär. Immer mehr Hacker wurden von den Softwareunternehmen angestellt, und die bisher wahrgenommenen Freiheiten wurden stark eingeschränkt, Software wurde zu einem künstlich verknappten Gut.
In diese Zeit fiel die Arbeit von Richard Stallman am „AI Lab“ (Abteilung für Künstliche Intelligenz) des Massachusetts Institute of Technology. Als dort ebenfalls proprietäre Software in den Laboren eingeführt wurde, bemühte Stallman sich darum, durch das Programmieren alternativer Software eine Monopolstellung proprietärer Anbieter zu verhindern. Er folgte damit seinen Prinzipien einer wissenschaftlichen Zusammenarbeit, die einen freien und ungehinderten Austausch von Software vorsahen.
Das Unternehmen AT&T entschied sich 1983, eine proprietäre Version seines Unix auf den Markt zu bringen: UNIX System V. Im September 1983 gründete Richard Stallman das GNU Projekt mit dem Ziel, ein freies, UNIX-ähnliches Betriebssystem mit Namen „GNU“ zu entwickeln.Damit die Idee der Freiheit auch rechtlich abgesichert sein würde, mussten freie Lizenzen erdacht werden. Stallman entwarf das Copyleft-Prinzip, das bedeutet, dass alle, die die Software (mit oder ohne Änderungen) weiter verteilen, die Freiheit zum Weitergeben und Verändern mitgeben müssen. Das Copyleft garantiert, dass alle Benutzer Freiheit haben. Auf diesem Prinzip beruhen die Lizenzen der GNU-Software.
Eine organisatorische Basis für GNU und Freie Software überhaupt ist die 1985 gegründete, gemeinnützige Stiftung Free Software Foundation (FSF). Für Softwareprojekte bestanden in den frühen und mittleren achtziger Jahren noch jeweils individuelle Lizenzen. Stallman verband die Rahmenpunkte zu einer einzelnen Lizenz und veröffentlichte 1989 die GNU General Public License (GNU GPL). Diese ist die heute am stärksten verbreitete Lizenz für Freie Software.
1991 war das GNU-Betriebssystem bis auf den Kernel vollständig. Einige Leute erkannten, dass Linux, ein damals proprietärer Kernel für Minix, sich für GNU eignen könnte. Nachdem die Entwickler den Linux-Kernel unter die „GNU GPL“ stellten, konnte zum ersten Mal ein vollständig freies Betriebssystem ausgebaut werden. Mit der darauffolgenden rasanten Entwicklung und Verbreitung von GNU und Linux wurde freie Software von zunehmend mehr Menschen genutzt.
Es gab zwei größere Prozesse, bei denen Unternehmen versuchten, freie Software in ihren ausschließlichen Besitz zu bringen:
1992 klagte AT&T gegen die Universität von Kalifornien um die Rechte an den UNIX-Quellen. Wie sich herausstellte, hatte AT&T die freie universitäre Produktion gesamt in ihren Bestand übernommen und lediglich die Urheberangaben entfernt. Im Rahmen eines Vergleichs erhielt AT&T von etwa 18.000 umstrittenen Dateien ausschließliche Rechten an dreien.
2003 klagte SCO gegen IBM um die Rechte an den Linux-Quellen. SCO begründete ihren Vorstoß mit angeblichen Verletzungen des UNIX-Copyrights. IBM hätte Quellen aus UNIX illegal nach Linux übertragen. SCO konnten seine Behauptung im Prozess aber nicht belegen. Das Verfahren endete, als sich herausstellte, dass SCO nicht im Besitz von UNIX-Urheberrechten war, sondern diese bei Novell lagen.
Richard Stallman, Initiator des GNU-Projektes, Gründer der Free Software Foundation, Hauptautor der GNU GPL Versionen 1–3, Mitglied des Board of Directors der FSF, Empfänger des MacArthur Fellowships, des EFF Pioneer Awards und des Takeda Foundation Awards
Bruce Perens, ehemaliger Projektleiter für Debian, der Hauptautor der Open-Source-Definition, ein Begründer von Software in the Public Interest (SPI) und Mitbegründer der OSI, der sich wieder von Open Source distanziert und zu freier Software bekannt hat.
Theo de Raadt, Mitbegründer von NetBSD, Gründer und Leiter von OpenBSD und OpenSSH und Empfänger des FSF Awards
Eben Moglen, Gründer und Vorsitzender des Software Freedom Law Center, pro bono Chefsyndikus der FSF, ehemaliges Mitglied des Board of Directors der FSF, Empfänger des EFF Pioneer Awards
Lawrence Lessig, gründete das Center for Internet and Society und die Creative-Commons-Initiative, Mitglied des Board of Directors der FSF, Empfänger des FSF Awards
Georg Greve, Gründer der Free Software Foundation Europe und deren Präsident von 2001 bis 2009, seit 2010 Geschäftsführer der Kolab Systems AG und Empfänger des Bundesverdienstkreuzes am Bande
Im Juli 2007 waren über 5000 Software-Pakete im „FSF/UNESCO Free Software Directory“ eingetragen, welches 1999 ebenfalls als ein Projekt der FSF startete.
Die Webbrowser Firefox, Chromium (die technische Basis von Chrome), Rekonq, Qupzilla, Midori und viele andere.
Compiler oder Interpreter von Programmiersprachen wie Perl, PHP, Java, Python, Ruby, Pharo Smalltalk und Tcl
KDE, eine Arbeitsumgebung (englisch Desktop-Environment) (integrierte grafische Oberfläche) sowie die gesamte KDE Software Compilation: KDE SC
Bibliotheken: GDAL, GEOS, GeoTools, PostGISEine Studie aus dem Jahr 2015 zeigt, dass die meisten Freie-Software-Projekte beim Webdienst GitHub von wenigen oder nur einem einzigen Entwickler abhängen.
Freie Software kann, gemäß den vier Freiheiten, meist nahezu beliebig kopiert und weitergegeben werden. Freie Software darf zwar zu einem beliebig hohen Preis verkauft werden, doch ist sie fast immer kostenlos im Internet erhältlich, und so ist ihr Verkaufswert auf Datenträgern meist nicht viel höher als die Selbstkosten. Eine bemerkenswerte Ausnahme ist das GNU-Projekt, das Freie Software mit deutlicher Profitspanne anbietet und in den 1980er-Jahren einen erheblichen Teil seiner Einnahmen aus dem Verkauf von Software bestritt. Das GNU-Projekt hatte damals jedoch wegen seiner zentralen Rolle bei der Entwicklung freier Software und der damals geringen Verbreitung und Leistungsfähigkeit des Internets eine besondere Rolle, die es heute nicht mehr gibt.
Einige Geschäftsmodelle, die mit freier Software zu tun haben, konzentrieren sich deswegen auf den Dienstleistungsaspekt der Softwareentwicklung, -weiterentwicklung und -anpassung. Wartung und individuelle Anpassung der Software sowie Schulung und technische Unterstützung sind für die Kunden vorrangig. Unternehmen, die allein diese Dienstleistungen als Geschäftsstrategie gewählt haben, sind zum Beispiel MySQL AB, Red Hat und Qt Development Frameworks. Freie Software unterliegt keiner Rivalität und nicht der Ausschließbarkeit, ist somit ein reines öffentliches Gut und kann folglich nicht einem üblichen Marktgeschehen unterliegen. Dennoch betrachten die Herausgeber proprietärer Software sie als eine ernste Bedrohung für ihr Geschäftsmodell der Lizenzierung und versuchen deshalb, potenzielle Kunden von der Benutzung freier Software abzuhalten. Trotzdem sind Hersteller proprietärer Software aktive Nutzer von freier Software und unterstützen die Verfügbarkeit von proprietärer Software auf Plattformen, die auf freier Software basieren.
Als Argumente für ihre Produkte führen Hersteller proprietärer Software unter anderem mehr Garantien, bessere Qualität – besonders im Hinblick auf Benutzerfreundlichkeit und bessere Dienstleistungen – an. Solche Argumente, die auf Versprechungen von Open Source, nicht von freier Software kontern, hat Richard M. Stallman wiederholt als tendenziös und thematisch verfehlt angegriffen; in seinen Augen ist die Entscheidung für oder gegen Freie Software primär eine ethische und soziale Entscheidung, von der nicht durch Qualitätsdiskussionen abgelenkt werden darf.
Copyleft-Lizenzen, die GNU General Public License (GNU GPL) ist die am häufigsten verwendete. Der Autor behält das Copyright, und es sind Klauseln enthalten, dass veränderte und weitergegebene Software frei bleibt. Auch der Quellcode muss zur Verfügung gestellt werden.
Bei BSD-artigen Lizenzen behält der Autor das Copyright. Diese dem Grundsatz „Ehre, wem Ehre gebührt“ folgende Lizenz enthält den Namen des Autors und oft auch eine Haftungsbeschränkung. Veränderung und Weitergabe in jeder Form ist erlaubt, das heißt, sie darf auch in proprietäre Software eingebaut werden. In diese Klasse fallen die Apache-Lizenz und die MIT-Lizenz.
Gemeinfreiheit. Der Autor verzichtet auf das Copyright. Damit kann jeder alles mit der Software machen, sie etwa in eigene Programme einbauen, verkaufen oder sie selbst wieder zu proprietärer Software machen. Gemeinfreiheit ist jedoch keine Lizenz, sondern ein gemeinfreies Werk ist besitzlos. In Staaten, in denen keine Gemeinfreiheit von Software möglich ist (etwa in Teilen der Europäischen Union), weil etwa die Urheberrechtsgesetze eine bewusste Übergabe in die Gemeinfreiheit nicht zulassen und die Schutzfristen nach dem Tod eines Autors so lang sind, dass noch keine Gemeinfreiheit jemals geschriebener Software eingetreten ist, wird statt der Gemeinfreiheit eine Lizenzierung verwendet, die dem Lizenznehmer keinerlei Verpflichtungen auferlegt und ihn von allen durch die allgemeinen Copyright-Regelungen auferlegten Beschränkungen befreit (zum Beispiel die Do What The Fuck You Want To Public License (WTFPL) oder die CC0).
Hardware-Hersteller gehen immer mehr dazu über, die Schnittstellenspezifikationen geheim zu halten, um der Konkurrenz die Nachahmung technischer Lösungsansätze zu verwehren. Der Grund hierfür liegt im zunehmenden Wettbewerbsdruck und darin, dass es billiger ist und schneller geht, einen solchen Schutz technisch einzubauen, als das errungene geistige Gut durch ein Patent für sich zu reservieren. Wenn nicht öffentlich dokumentiert ist, wie die Geräte anzusteuern sind, erleidet die Hardwareunterstützung freier Betriebssysteme mittels freier Treiber einen schweren Rückschlag, da sie allenfalls noch durch Reverse Engineering in Gang gebracht werden kann.
Andererseits haben die Hersteller die Benutzer der wichtigeren freien Betriebssysteme (vor allem GNU/Linux – wobei insbesondere Linux und der X.Org-Server relevant sind) als Kundengruppe erkannt. Viele von ihnen stellen jedoch proprietäre Treiber zur Verfügung. Diese Treiber stoßen unter den Anhängern freier Software auf höchst geteilte Meinungen: einige sind glücklich darüber, dass sie die „Unterstützung“ der Hardware-Hersteller gewonnen haben und deren Hardware durch das von ihnen bevorzugte Betriebssystem nun mehr oder weniger unterstützt wird, andere lehnen proprietäre Treiber grundsätzlich ab.
Von einer generellen Schnittstellenfreigabe würden die Benutzer freier Betriebssysteme sicherlich profitieren. Neben den ideologischen kommen hier Fragen der Systemstabilität zum Tragen. Sollte beispielsweise ein proprietärer Linux-Netzwerkkartentreiber regelmäßig zu Abstürzen des Systems führen, wären die Linux-Entwickler dagegen machtlos und es hinge vom Gutdünken des Herstellers ab, ob der Fehler behoben wird.
Die regelmäßig in den Schlagzeilen auftauchenden Softwarepatente haben auf Freie Software einen besonders schwerwiegenden Einfluss, denn es ist zum Teil rechtlich noch nicht einmal möglich, mit freier Software die Patentauflagen zu erfüllen. Diese bestehen nämlich in einigen Fällen auf einer Gebühr pro in Umlauf gebrachter Kopie, aber Freie Software verlangt gerade, dass der Herausgeber darauf keinen Einfluss haben darf. Selbst wenn er die Lizenzgebühren zum Beispiel durch Spenden zahlen würde, müsste er eine genaue Zahl der Kopien, die im Umlauf sind, vorlegen können, womit es keine Freie Software mehr wäre.
Trusted Computing kann Veränderungen an einer Computer-Plattform eindeutig erkennen und damit sowohl externe Software-Angriffe als auch Veränderungen durch den Benutzer, Konfigurationen, Fehlfunktionen, Sicherheitslücken oder von Anwendungsprogrammen eindeutig identifizieren. Die Reaktion auf eine solche Veränderung kann (aber muss nicht) durch ein entsprechendes, sicheres Betriebssystem erfolgen. Trusted Computing kann daher auch zur Absicherung von Digital Rights Management (DRM) und zum Kopierschutz verwendet werden.
Politisch gesehen muss Freie Software immer vom Benutzer ersetzbar und veränderbar sein. Software, die in binärer Form zertifiziert sein muss, ist dies nicht. Technisch gesehen kann in freier Software vor dem Benutzer nichts im Binärcode verheimlicht werden, weil der Quellcode für jeden zugänglich sein muss. Somit kann die Verschlüsselung, mit der die Daten vor dem Benutzer „bewahrt“ werden, einfacher hintergangen werden.
Eine weitere Inkompatibilität tut sich mit dem Kopierschutz von DVDs auf: Die Umgehung wirksamer Kopierschutzmaßnahmen ist seit den um die Jahrtausendwende weltweit nach und nach etablierten Reformen zum Copyright (in den USA der Digital Millennium Copyright Act (DMCA)) gesetzlich nur noch mit Zustimmung des Rechteinhabers erlaubt. Dieses Verbot erstreckt sich auf die Herstellung oder Verbreitung von Programmen, die diese Maßnahmen umgehen können, so dass freie Abspielsoftware für kopiergeschützte DVDs nicht legal geschrieben werden kann – aus ihren natürlichen Interessen heraus würden die Rechteinhaber ihre Zustimmung dazu niemals erteilen, weil dadurch der Sinn der Maßnahmen ad absurdum geführt würde.
Falls Hardwarehersteller wie Intel oder AMD funktionseinschränkende Verfahren in Chipsätze oder Prozessoren implementieren sollten, könnte Freie Software den vollen Funktionsumfang möglicherweise nur noch auf freier Hardware entfalten.
Dominik König: Das einfache, unentgeltliche Nutzungsrecht für jedermann, Vandenhoeck & Ruprecht, Göttingen 2016, ISBN 978-3-8471-0610-4.
Volker Grassmuck: Freie Software zwischen Privat- und Gemeineigentum. 2. Auflage, bpb, Bonn 2004, ISBN 3-89331-432-6 (freie-software.bpb.de, PDF, 1,5 MB; Website zum Buch).
Stefan Meretz: Linux & Co. Freie Software – Ideen für eine andere Gesellschaft. AG SPAK Bücher, Neu-Ulm 2000, ISBN 3-930830-16-7.
Bernhard E. Reiter: Wandel der IT: Mehr als 20 Jahre Freie Software. In: HMD, Heft 238, August 2004, S. 83–91, ISSN 1436-3011 (intevation.de).
Edward Viesel: Freiheit statt Freibier. Geschichte und Praxis der freien digitalen Welt – mit einer Einführung in Linux. Unrast Verlag, Münster 2006, ISBN 3-89771-450-7.
Definition und PhilosophieFreie-Software-Bewegung, Warum Software frei sein sollte, Freie-Software-Definition (gnu.org)
Was bedeutet „Frei“? oder Was bedeutet der Begriff „Freie Software“? (debian.org)PräsentationenVideo und Audio Präsentationen über Freie Software in Englisch (übergeordneter Link)
The Free Software DirectoryAbgrenzungRichard Stallman: Warum „Open Source“ den Punkt von Freier Software verfehlt
